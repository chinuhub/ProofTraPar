/* rti2code: autogenerated libFAUDES luabindings declarations: libFAUDES 2.26g synthesis-observer-observability-diagnosis-hiosys-iosystem-multitasking-coordinationcontrol-pushdown-timed-simulator-iodevice-luabindings */

/* faudes-function "Accessible" */
#if SwigModule == "SwigCoreFaudes"
void Accessible(Generator&);
SwigHelpEntry("Functions", "Reachability", " Accessible(+InOut+ Generator G)");
void Accessible(const Generator&, Generator&);
SwigHelpEntry("Functions", "Reachability", " Accessible(+In+ Generator GArg, +Out+ Generator GRes)");
#endif 

/* faudes-function "AlphabetDifference" */
#if SwigModule == "SwigCoreFaudes"
%rename(AlphabetDifference) SetDifference;
void SetDifference(const EventSet&, const EventSet&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetDifference(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)");
#endif 

/* faudes-function "AlphabetEquality" */
#if SwigModule == "SwigCoreFaudes"
%rename(AlphabetEquality) SetEquality;
bool SetEquality(const EventSet&, const EventSet&);
SwigHelpEntry("EventSet", "Functions", "Boolean AlphabetEquality(+In+ EventSet Sigma1, +In+ EventSet Sigma2)");
#endif 

/* faudes-function "AlphabetExtract" */
#if SwigModule == "SwigCoreFaudes"
void AlphabetExtract(const Generator&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetExtract(+In+ Generator Gen, +Out+ EventSet Sigma)");
#endif 

/* faudes-function "AlphabetInclusion" */
#if SwigModule == "SwigCoreFaudes"
%rename(AlphabetInclusion) SetInclusion;
bool SetInclusion(const EventSet&, const EventSet&);
SwigHelpEntry("EventSet", "Functions", "Boolean AlphabetInclusion(+In+ EventSet Sigma1, +In+ EventSet Sigma2)");
#endif 

/* faudes-function "AlphabetIntersection" */
#if SwigModule == "SwigCoreFaudes"
%rename(AlphabetIntersection) SetIntersection;
void SetIntersection(const EventSet&, const EventSet&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetIntersection(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)");
void SetIntersection(const EventSetVector&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetIntersection(+In+ EventSetVector AVec, +Out+ EventSet ARes)");
void SetIntersection(const GeneratorVector&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetIntersection(+In+ GeneratorVector GVec, +Out+ EventSet ARes)");
#endif 

/* faudes-function "AlphabetLanguage" */
#if SwigModule == "SwigCoreFaudes"
void AlphabetLanguage(const EventSet&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " AlphabetLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "AlphabetUnion" */
#if SwigModule == "SwigCoreFaudes"
%rename(AlphabetUnion) SetUnion;
void SetUnion(const EventSet&, const EventSet&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetUnion(+In+ EventSet Sigma1, +In+ EventSet Sigma2, +Out+ EventSet Sigma)");
void SetUnion(const EventSetVector&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetUnion(+In+ EventSetVector AVec, +Out+ EventSet ARes)");
void SetUnion(const GeneratorVector&, EventSet&);
SwigHelpEntry("EventSet", "Functions", " AlphabetUnion(+In+ GeneratorVector GVec, +Out+ EventSet ARes)");
#endif 

/* faudes-function "Automaton" */
#if SwigModule == "SwigCoreFaudes"
void Automaton(Generator&);
SwigHelpEntry("Functions", "Generator misc", " Automaton(+InOut+ Generator GArg)");
void Automaton(Generator&, const EventSet&);
SwigHelpEntry("Functions", "Generator misc", " Automaton(+InOut+ Generator GArg, +In+ EventSet Sigma)");
#endif 

/* faudes-function "Coaccessible" */
#if SwigModule == "SwigCoreFaudes"
void Coaccessible(Generator&);
SwigHelpEntry("Functions", "Reachability", " Coaccessible(+InOut+ Generator G)");
void Coaccessible(const Generator&, Generator&);
SwigHelpEntry("Functions", "Reachability", " Coaccessible(+In+ Generator GArg, +Out+ Generator GRes)");
#endif 

/* faudes-function "Complete" */
#if SwigModule == "SwigCoreFaudes"
void Complete(Generator&);
SwigHelpEntry("Functions", "Reachability", " Complete(+InOut+ Generator G)");
void Complete(const Generator&, Generator&);
SwigHelpEntry("Functions", "Reachability", " Complete(+In+ Generator G, +Out+ Generator GRes)");
void Complete(Generator&, const EventSet&);
SwigHelpEntry("Functions", "Reachability", " Complete(+InOut+ Generator G, +In+ EventSet SigmaO)");
void Complete(const Generator&, const EventSet&, Generator&);
SwigHelpEntry("Functions", "Reachability", " Complete(+In+ Generator G, +In+ EventSet SigmaO, +Out+ Generator GRes)");
#endif 

/* faudes-function "ConDecExtension" */
#if SwigModule == "SwigCoordinationControl"
void ConDecExtension(const System&, const EventSetVector&, EventSet&);
SwigHelpEntry("CoordinationControl", "Decomposability", " ConDecExtension(+In+ System gen, +In+ EventSetVector alphVector, +InOut+ EventSet ek)");
#endif 

/* faudes-function "DecentralizedDiagnoser" */
#if SwigModule == "SwigDiagnosis"
bool DecentralizedDiagnoser(const System&, const Generator&, const EventSetVector&, GeneratorVector&);
SwigHelpEntry("Diagnosis", "Decentralized-diagnosis", "Boolean DecentralizedDiagnoser(+In+ System GArg, +In+ Generator KArg, +In+ EventSetVector AVArg, +Out+ GeneratorVector DVArg)");
#endif 

/* faudes-function "DecentralizedModularDiagnoser" */
#if SwigModule == "SwigDiagnosis"
void DecentralizedModularDiagnoser(const SystemVector&, const Generator&, GeneratorVector&);
SwigHelpEntry("Diagnosis", "Decentralized-diagnosis", " DecentralizedModularDiagnoser(+In+ SystemVector GVArg, +In+ Generator KArg, +Out+ GeneratorVector DVArg)");
#endif 

/* faudes-function "Deterministic" */
#if SwigModule == "SwigCoreFaudes"
%rename(Deterministic) aDeterministic;
void aDeterministic(const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Deterministic(+In+ Generator G, +Out+ Generator GRes)");
#endif 

/* faudes-function "EmptyLanguage" */
#if SwigModule == "SwigCoreFaudes"
void EmptyLanguage(const EventSet&, Generator&);
SwigHelpEntry("Functions", "Language misc", " EmptyLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "EmptyStringLanguage" */
#if SwigModule == "SwigCoreFaudes"
void EmptyStringLanguage(const EventSet&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " EmptyStringLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "EventDiagnoser" */
#if SwigModule == "SwigDiagnosis"
void EventDiagnoser(const System&, const AttributeFailureTypeMap&, Diagnoser&);
SwigHelpEntry("Diagnosis", "Event-diagnosis", " EventDiagnoser(+In+ System GArg, +In+ FailureTypeMap FArg, +Out+ Diagnoser GRes)");
#endif 

/* faudes-function "FullLanguage" */
#if SwigModule == "SwigCoreFaudes"
void FullLanguage(const EventSet&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " FullLanguage(+In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "HioFreeInput" */
#if SwigModule == "SwigHioSys"
void HioFreeInput(HioPlant&);
SwigHelpEntry("HioSys", "Io form", " HioFreeInput(+InOut+ HioPlant GArg)");
void HioFreeInput(HioController&);
SwigHelpEntry("HioSys", "Io form", " HioFreeInput(+InOut+ HioController GArg)");
void HioFreeInput(HioEnvironment&);
SwigHelpEntry("HioSys", "Io form", " HioFreeInput(+InOut+ HioEnvironment GArg)");
void HioFreeInput(HioConstraint&);
SwigHelpEntry("HioSys", "Io form", " HioFreeInput(+InOut+ HioConstraint GArg)");
void HioFreeInput(const Generator&, const EventSet&, const EventSet&, Generator&, const std::string&, const std::string&);
SwigHelpEntry("HioSys", "Io form", " HioFreeInput(+In+ Generator GArg, +In+ EventSet U, +In+ EventSet Y, +Out+ Generator GRes, +In+ String StrErr1, +In+ String StrErr2)");
#endif 

/* faudes-function "HioShuffle" */
#if SwigModule == "SwigHioSys"
void HioShuffle(const HioPlant&, const HioPlant&, HioPlant&);
SwigHelpEntry("HioSys", "Composition", " HioShuffle(+In+ HioPlant GArg1, +In+ HioPlant GArg2, +Out+ HioPlant GRes)");
void HioShuffle(const Generator&, const Generator&, const EventSet&, const EventSet&, const EventSet&, const EventSet&, Generator&);
SwigHelpEntry("HioSys", "Composition", " HioShuffle(+In+ Generator GArg1, +In+ Generator GArg2, +In+ EventSet Yp, +In+ EventSet Up, +In+ EventSet Ye, +In+ EventSet Ue, +Out+ Generator GRes)");
#endif 

/* faudes-function "HioStatePartition" */
#if SwigModule == "SwigHioSys"
void HioStatePartition(HioPlant&);
void HioStatePartition(HioController&);
void HioStatePartition(HioEnvironment&);
#endif 

/* faudes-function "HioSynth" */
#if SwigModule == "SwigHioSys"
void HioSynth(const Generator&, const Generator&, const Generator&, const Generator&, const EventSet&, const EventSet&, const EventSet&, const EventSet&, const EventSet&, const EventSet&, Generator&);
SwigHelpEntry("HioSys", "Synthesis", " HioSynth(+In+ Generator GPlant, +In+ Generator GSpec, +In+ Generator GConstr, +In+ Generator GConstrLoc, +In+ EventSet Yc, +In+ EventSet Uc, +In+ EventSet Yp, +In+ EventSet Up, +In+ EventSet Yel, +In+ EventSet Uel, +Out+ Generator GController)");
#endif 

/* faudes-function "HioSynthHierarchical" */
#if SwigModule == "SwigHioSys"
void HioSynthHierarchical(const HioPlant&, const HioEnvironment&, const HioPlant&, const Generator&, const HioConstraint&, const HioConstraint&, HioController&);
SwigHelpEntry("HioSys", "Synthesis", " HioSynthHierarchical(+In+ HioPlant GPlant, +In+ HioEnvironment GEnv, +In+ HioPlant GSpec, +In+ Generator GConstrInt, +In+ HioConstraint GConstrC, +In+ HioConstraint GConstrL, +Out+ HioController GController)");
#endif 

/* faudes-function "HioSynthMonolithic" */
#if SwigModule == "SwigHioSys"
void HioSynthMonolithic(const HioPlant&, const HioPlant&, const HioConstraint&, const HioConstraint&, const HioConstraint&, HioController&);
SwigHelpEntry("HioSys", "Synthesis", " HioSynthMonolithic(+In+ HioPlant GPlant, +In+ HioPlant GSpec, +In+ HioConstraint GConstrC, +In+ HioConstraint GConstrP, +In+ HioConstraint GConstrE, +Out+ HioController GController)");
#endif 

/* faudes-function "InsertRelabeledEvents" */
#if SwigModule == "SwigObserver"
%rename(InsertRelabeledEvents) insertRelabeledEvents;
void insertRelabeledEvents(System&, const EventRelabelMap&);
SwigHelpEntry("Observer", "Misc", " InsertRelabeledEvents(+InOut+ System GPlant, +In+ EventRelabelMap Map)");
void insertRelabeledEvents(System&, const EventRelabelMap&, EventSet&);
SwigHelpEntry("Observer", "Misc", " InsertRelabeledEvents(+InOut+ System GPlant, +In+ EventRelabelMap Map, +Out+ EventSet SigmaNew)");
#endif 

/* faudes-function "IntegerSum" */
#if SwigModule == "SwigCoreFaudes"
long int IntegerSum(const long int&, const long int&);
SwigHelpEntry("Integer", "Elemetary types", "Integer IntegerSum(+In+ Integer I_1, +In+ Integer I_2)");
long int IntegerSum(const IntegerVector&);
SwigHelpEntry("Integer", "Elemetary types", "Integer IntegerSum(+In+ IntegerVector IVec)");
#endif 

/* faudes-function "InvProject" */
#if SwigModule == "SwigCoreFaudes"
%rename(InvProject) aInvProject;
void aInvProject(Generator&, const EventSet&);
SwigHelpEntry("Functions", "Language misc", " InvProject(+InOut+ Generator G0, +In+ EventSet Sigma)");
void aInvProject(const Generator&, const EventSet&, Generator&);
SwigHelpEntry("Functions", "Language misc", " InvProject(+In+ Generator G0, +In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "IoFreeInput" */
#if SwigModule == "SwigIoSystem"
void IoFreeInput(IoSystem&);
SwigHelpEntry("IoSystem", "Io form", " IoFreeInput(+InOut+ IoSystem GArg)");
void IoFreeInput(Generator&, EventSet&);
SwigHelpEntry("IoSystem", "Io form", " IoFreeInput(+InOut+ Generator GArg, +InOut+ EventSet SigU)");
#endif 

/* faudes-function "IoStatePartition" */
#if SwigModule == "SwigIoSystem"
void IoStatePartition(IoSystem&);
#endif 

/* faudes-function "IoSynthesis" */
#if SwigModule == "SwigIoSystem"
void IoSynthesis(const IoSystem&, const Generator&, IoSystem&);
SwigHelpEntry("IoSystem", "Io form", " IoSynthesis(+In+ IoSystem GPlant, +In+ Generator GSpec, +Out+ IoSystem GSupervisor)");
#endif 

/* faudes-function "IoSynthesisNB" */
#if SwigModule == "SwigIoSystem"
void IoSynthesisNB(const IoSystem&, const Generator&, IoSystem&);
SwigHelpEntry("IoSystem", "Io form", " IoSynthesisNB(+In+ IoSystem GPlant, +In+ Generator GSpec, +Out+ IoSystem GSupervisor)");
#endif 

/* faudes-function "IsAccessible" */
#if SwigModule == "SwigCoreFaudes"
bool IsAccessible(const Generator&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsAccessible(+In+ Generator G)");
#endif 

/* faudes-function "IsCoDiagnosable" */
#if SwigModule == "SwigDiagnosis"
bool IsCoDiagnosable(const System&, const Generator&, const EventSetVector&);
SwigHelpEntry("Diagnosis", "Decentralized-diagnosis", "Boolean IsCoDiagnosable(+In+ System GArg, +In+ Generator KArg, +In+ EventSetVector AVArg)");
#endif 

/* faudes-function "IsCoaccessible" */
#if SwigModule == "SwigCoreFaudes"
bool IsCoaccessible(const Generator&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsCoaccessible(+In+ Generator G)");
#endif 

/* faudes-function "IsComplete" */
#if SwigModule == "SwigCoreFaudes"
bool IsComplete(const Generator&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsComplete(+In+ Generator G)");
bool IsComplete(const Generator&, const EventSet&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsComplete(+In+ Generator G, +In+ EventSet SigmaO)");
#endif 

/* faudes-function "IsConditionalClosed" */
#if SwigModule == "SwigCoordinationControl"
bool IsConditionalClosed(const GeneratorVector&, const Generator&, const GeneratorVector&, const Generator&);
SwigHelpEntry("CoordinationControl", "Closedness", "Boolean IsConditionalClosed(+In+ GeneratorVector specVect, +In+ Generator pk, +In+ GeneratorVector genVect, +In+ Generator gk)");
#endif 

/* faudes-function "IsConditionalControllable" */
#if SwigModule == "SwigCoordinationControl"
bool IsConditionalControllable(const GeneratorVector&, const Generator&, const GeneratorVector&, const Generator&, const EventSet&);
SwigHelpEntry("CoordinationControl", "Controllability", "Boolean IsConditionalControllable(+In+ GeneratorVector specVect, +In+ Generator pk, +In+ GeneratorVector genVect, +In+ Generator gk, +In+ EventSet ACntrl)");
#endif 

/* faudes-function "IsConditionalDecomposable" */
#if SwigModule == "SwigCoordinationControl"
bool IsConditionalDecomposable(const System&, const EventSetVector&, const EventSet&, System&);
SwigHelpEntry("CoordinationControl", "Decomposability", "Boolean IsConditionalDecomposable(+In+ System gen, +In+ EventSetVector alphVector, +In+ EventSet ek, +InOut+ System proof)");
#endif 

/* faudes-function "IsControllable" */
#if SwigModule == "SwigSynthesis"
bool IsControllable(const Generator&, const EventSet&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsControllable(+In+ Generator GPlant, +In+ EventSet ACntrl, +In+ Generator GCand)");
bool IsControllable(const System&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsControllable(+In+ System GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsDeterministic" */
#if SwigModule == "SwigCoreFaudes"
bool IsDeterministic(const Generator&);
SwigHelpEntry("Functions", "Generator misc", "Boolean IsDeterministic(+In+ Generator G)");
#endif 

/* faudes-function "IsEmptyLanguage" */
#if SwigModule == "SwigCoreFaudes"
bool IsEmptyLanguage(const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean IsEmptyLanguage(+In+ Generator GArg)");
#endif 

/* faudes-function "IsEventDiagnosable" */
#if SwigModule == "SwigDiagnosis"
bool IsEventDiagnosable(const System&, const AttributeFailureTypeMap&);
SwigHelpEntry("Diagnosis", "Event-diagnosis", "Boolean IsEventDiagnosable(+In+ System GArg, +In+ FailureTypeMap FArg)");
#endif 

/* faudes-function "IsHioConstraintForm" */
#if SwigModule == "SwigHioSys"
bool IsHioConstraintForm(HioConstraint&);
SwigHelpEntry("HioSys", "Io form", "Boolean IsHioConstraintForm(+InOut+ HioConstraint GArg)");
#endif 

/* faudes-function "IsHioControllerForm" */
#if SwigModule == "SwigHioSys"
bool IsHioControllerForm(HioController&);
SwigHelpEntry("HioSys", "Io form", "Boolean IsHioControllerForm(+InOut+ HioController GArg)");
#endif 

/* faudes-function "IsHioEnvironmentForm" */
#if SwigModule == "SwigHioSys"
bool IsHioEnvironmentForm(HioEnvironment&);
SwigHelpEntry("HioSys", "Io form", "Boolean IsHioEnvironmentForm(+InOut+ HioEnvironment GArg)");
#endif 

/* faudes-function "IsHioPlantForm" */
#if SwigModule == "SwigHioSys"
bool IsHioPlantForm(HioPlant&, std::string& OUTPUT);
SwigHelpEntry("HioSys", "Io form", "Boolean,String IsHioPlantForm(+InOut+ HioPlant GArg)");
bool IsHioPlantForm(HioPlant&);
SwigHelpEntry("HioSys", "Io form", "Boolean IsHioPlantForm(+InOut+ HioPlant GArg)");
bool IsHioPlantForm(HioPlant&, StateSet&, StateSet&, StateSet&, EventSet&, TransSet&, StateSet&, std::string& OUTPUT);
SwigHelpEntry("HioSys", "Io form", "Boolean,String IsHioPlantForm(+InOut+ HioPlant GArg, +Out+ StateSet QYpYe, +Out+ StateSet QUp, +Out+ StateSet QUe, +Out+ EventSet ErrEv, +Out+ TransSet ErrTr, +Out+ StateSet ErrSt)");
#endif 

/* faudes-function "IsIndicatorEventDiagnosable" */
#if SwigModule == "SwigDiagnosis"
bool IsIndicatorEventDiagnosable(const System&, const AttributeFailureTypeMap&);
SwigHelpEntry("Diagnosis", "Event-diagnosis", "Boolean IsIndicatorEventDiagnosable(+In+ System GArg, +In+ FailureTypeMap FArg)");
#endif 

/* faudes-function "IsInputLocallyFree" */
#if SwigModule == "SwigIoSystem"
bool IsInputLocallyFree(IoSystem&);
SwigHelpEntry("IoSystem", "Io form", "Boolean IsInputLocallyFree(+InOut+ IoSystem GArg)");
#endif 

/* faudes-function "IsInputOmegaFree" */
#if SwigModule == "SwigIoSystem"
bool IsInputOmegaFree(IoSystem&);
SwigHelpEntry("IoSystem", "Io form", "Boolean IsInputOmegaFree(+InOut+ IoSystem GArg)");
#endif 

/* faudes-function "IsIoSystem" */
#if SwigModule == "SwigIoSystem"
bool IsIoSystem(IoSystem&);
SwigHelpEntry("IoSystem", "Io form", "Boolean IsIoSystem(+InOut+ IoSystem GArg)");
#endif 

/* faudes-function "IsLanguageDiagnosable" */
#if SwigModule == "SwigDiagnosis"
bool IsLanguageDiagnosable(const System&, const Generator&);
SwigHelpEntry("Diagnosis", "Language-diagnosis", "Boolean IsLanguageDiagnosable(+In+ System GArg, +In+ Generator EArg)");
#endif 

/* faudes-function "IsLocallyControlConsistent" */
#if SwigModule == "SwigObserver"
%rename(IsLocallyControlConsistent) IsLCC;
bool IsLCC(const System&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsLocallyControlConsistent(+In+ System GArg, +In+ EventSet Sigma_h)");
bool IsLCC(const Generator&, const EventSet&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsLocallyControlConsistent(+In+ Generator GArg, +In+ EventSet Sigma_c, +In+ EventSet Sigma_h)");
#endif 

/* faudes-function "IsLoopPreservingObserver" */
#if SwigModule == "SwigDiagnosis"
bool IsLoopPreservingObserver(const System&, const EventSet&);
SwigHelpEntry("Diagnosis", "Language-diagnosis", "Boolean IsLoopPreservingObserver(+In+ System GArg, +In+ EventSet AArg)");
#endif 

/* faudes-function "IsModularDiagnosable" */
#if SwigModule == "SwigDiagnosis"
bool IsModularDiagnosable(const SystemVector&, const GeneratorVector&);
SwigHelpEntry("Diagnosis", "Modular-diagnosis", "Boolean IsModularDiagnosable(+In+ SystemVector GVArg, +In+ GeneratorVector KVArg)");
#endif 

/* faudes-function "IsMsaObserver" */
#if SwigModule == "SwigObserver"
%rename(IsMsaObserver) IsMSA;
bool IsMSA(const Generator&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsMsaObserver(+In+ Generator GArg, +In+ EventSet Sigma_h)");
#endif 

/* faudes-function "IsMtcObserver" */
#if SwigModule == "SwigMultitasking"
%rename(IsMtcObserver) IsMtcObs;
bool IsMtcObs(const MtcSystem&, const EventSet&);
SwigHelpEntry("Multitasking", "Misc", "Boolean IsMtcObserver(+In+ MtcSystem GPlant, +In+ EventSet SigmaHi)");
#endif 

/* faudes-function "IsMutuallyControllable" */
#if SwigModule == "SwigObserver"
bool IsMutuallyControllable(const System&, const System&);
SwigHelpEntry("Observer", "Observer", "Boolean IsMutuallyControllable(+In+ System Sys1, +In+ System Sys2)");
#endif 

/* faudes-function "IsNaturalObserver" */
#if SwigModule == "SwigObserver"
%rename(IsNaturalObserver) IsObs;
bool IsObs(const Generator&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsNaturalObserver(+In+ Generator GArg, +In+ EventSet Sigma_h)");
#endif 

/* faudes-function "IsNonblocking" */
#if SwigModule == "SwigCoreFaudes"
bool IsNonblocking(const Generator&);
SwigHelpEntry("Functions", "Composition", "Boolean IsNonblocking(+In+ Generator G)");
bool IsNonblocking(const Generator&, const Generator&);
SwigHelpEntry("Functions", "Composition", "Boolean IsNonblocking(+In+ Generator G1, +In+ Generator G2)");
bool IsNonblocking(const GeneratorVector&);
SwigHelpEntry("Functions", "Composition", "Boolean IsNonblocking(+In+ GeneratorVector G)");
#endif 

/* faudes-function "IsNormal" */
#if SwigModule == "SwigSynthesis"
bool IsNormal(const Generator&, const EventSet&, const Generator&);
SwigHelpEntry("Synthesis", "Normality", "Boolean IsNormal(+In+ Generator L, +In+ EventSet AObs, +In+ Generator K)");
bool IsNormal(const System&, const Generator&);
SwigHelpEntry("Synthesis", "Normality", "Boolean IsNormal(+In+ System GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsOmegaClosed" */
#if SwigModule == "SwigCoreFaudes"
bool IsOmegaClosed(const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean IsOmegaClosed(+In+ Generator G)");
#endif 

/* faudes-function "IsOmegaControllable" */
#if SwigModule == "SwigSynthesis"
bool IsOmegaControllable(const Generator&, const EventSet&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsOmegaControllable(+In+ Generator GPlant, +In+ EventSet ACntrl, +In+ Generator GCand)");
bool IsOmegaControllable(const System&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsOmegaControllable(+In+ System GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsOmegaTrim" */
#if SwigModule == "SwigCoreFaudes"
bool IsOmegaTrim(const Generator&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsOmegaTrim(+In+ Generator G)");
#endif 

/* faudes-function "IsOutputControlConsistent" */
#if SwigModule == "SwigObserver"
%rename(IsOutputControlConsistent) IsOCC;
bool IsOCC(const System&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsOutputControlConsistent(+In+ System GArg, +In+ EventSet Sigma_h)");
bool IsOCC(const Generator&, const EventSet&, const EventSet&);
SwigHelpEntry("Observer", "Observer", "Boolean IsOutputControlConsistent(+In+ Generator GArg, +In+ EventSet Sigma_c, +In+ EventSet Sigma_h)");
#endif 

/* faudes-function "IsPrefixClosed" */
#if SwigModule == "SwigCoreFaudes"
bool IsPrefixClosed(const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean IsPrefixClosed(+In+ Generator G)");
#endif 

/* faudes-function "IsRelativelyMarked" */
#if SwigModule == "SwigSynthesis"
bool IsRelativelyMarked(const Generator&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsRelativelyMarked(+In+ Generator GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsRelativelyOmegaClosed" */
#if SwigModule == "SwigSynthesis"
bool IsRelativelyOmegaClosed(const Generator&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsRelativelyOmegaClosed(+In+ Generator GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsRelativelyPrefixClosed" */
#if SwigModule == "SwigSynthesis"
bool IsRelativelyPrefixClosed(const Generator&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsRelativelyPrefixClosed(+In+ Generator GPlant, +In+ Generator GCand)");
#endif 

/* faudes-function "IsStdSynthesisConsistent" */
#if SwigModule == "SwigSynthesis"
bool IsStdSynthesisConsistent(const System&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsStdSynthesisConsistent(+In+ System GPlant, +In+ Generator GPlant0)");
bool IsStdSynthesisConsistent(const Generator&, const EventSet&, const Generator&);
SwigHelpEntry("Synthesis", "Controllability", "Boolean IsStdSynthesisConsistent(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GPlant0)");
#endif 

/* faudes-function "IsStronglyCoaccessible" */
#if SwigModule == "SwigMultitasking"
bool IsStronglyCoaccessible(const MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", "Boolean IsStronglyCoaccessible(+In+ MtcSystem G)");
#endif 

/* faudes-function "IsStronglyTrim" */
#if SwigModule == "SwigMultitasking"
bool IsStronglyTrim(const MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", "Boolean IsStronglyTrim(+In+ MtcSystem G)");
#endif 

/* faudes-function "IsTrim" */
#if SwigModule == "SwigCoreFaudes"
bool IsTrim(const Generator&);
SwigHelpEntry("Functions", "Reachability", "Boolean IsTrim(+In+ Generator G)");
#endif 

/* faudes-function "KleeneClosure" */
#if SwigModule == "SwigCoreFaudes"
void KleeneClosure(Generator&);
SwigHelpEntry("Functions", "Regular expressions", " KleeneClosure(+InOut+ Generator G)");
void KleeneClosure(const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " KleeneClosure(+In+ Generator GArg, +Out+ Generator GRes)");
#endif 

/* faudes-function "LanguageComplement" */
#if SwigModule == "SwigCoreFaudes"
void LanguageComplement(Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageComplement(+InOut+ Generator GPar)");
void LanguageComplement(const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageComplement(+In+ Generator GArg, +Out+ Generator GRes)");
void LanguageComplement(const Generator&, const EventSet&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageComplement(+In+ Generator GArg, +In+ EventSet Sigma, +Out+ Generator GRes)");
#endif 

/* faudes-function "LanguageConcatenate" */
#if SwigModule == "SwigCoreFaudes"
void LanguageConcatenate(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageConcatenate(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
#endif 

/* faudes-function "LanguageDiagnoser" */
#if SwigModule == "SwigDiagnosis"
void LanguageDiagnoser(const System&, const Generator&, Diagnoser&);
SwigHelpEntry("Diagnosis", "Language-diagnosis", " LanguageDiagnoser(+In+ System GArg, +In+ Generator EArg, +Out+ Diagnoser GRes)");
#endif 

/* faudes-function "LanguageDifference" */
#if SwigModule == "SwigCoreFaudes"
void LanguageDifference(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageDifference(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
#endif 

/* faudes-function "LanguageDisjoint" */
#if SwigModule == "SwigCoreFaudes"
bool LanguageDisjoint(const Generator&, const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean LanguageDisjoint(+In+ Generator G1, +In+ Generator G2)");
#endif 

/* faudes-function "LanguageEquality" */
#if SwigModule == "SwigCoreFaudes"
bool LanguageEquality(const Generator&, const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean LanguageEquality(+In+ Generator G1, +In+ Generator G2)");
#endif 

/* faudes-function "LanguageInclusion" */
#if SwigModule == "SwigCoreFaudes"
bool LanguageInclusion(const Generator&, const Generator&);
SwigHelpEntry("Functions", "Language misc", "Boolean LanguageInclusion(+In+ Generator G1, +In+ Generator G2)");
#endif 

/* faudes-function "LanguageIntersection" */
#if SwigModule == "SwigCoreFaudes"
void LanguageIntersection(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageIntersection(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
void LanguageIntersection(const GeneratorVector&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageIntersection(+In+ GeneratorVector GVec, +Out+ Generator GRes)");
#endif 

/* faudes-function "LanguageUnion" */
#if SwigModule == "SwigCoreFaudes"
void LanguageUnion(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageUnion(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
void LanguageUnion(const GeneratorVector&, Generator&);
SwigHelpEntry("Functions", "Regular expressions", " LanguageUnion(+In+ GeneratorVector GVec, +Out+ Generator GRes)");
#endif 

/* faudes-function "LocalObservationConsistency" */
#if SwigModule == "SwigObservability"
bool LocalObservationConsistency(const System&, const System&, const EventSet&, const EventSet&);
SwigHelpEntry("Observability", "Observability", "Boolean LocalObservationConsistency(+In+ System GPlant, +In+ System GSpec, +In+ EventSet AHigh, +In+ EventSet AObs)");
#endif 

/* faudes-function "LoopPreservingObserver" */
#if SwigModule == "SwigDiagnosis"
void LoopPreservingObserver(const System&, const EventSet&, EventSet&);
SwigHelpEntry("Diagnosis", "Language-diagnosis", " LoopPreservingObserver(+In+ System GArg, +In+ EventSet IArg, +Out+ EventSet AArg)");
#endif 

/* faudes-function "MarkAllStates" */
#if SwigModule == "SwigCoreFaudes"
void MarkAllStates(Generator&);
SwigHelpEntry("", "", " MarkAllStates(+InOut+ Generator G)");
#endif 

/* faudes-function "ModularDiagnoser" */
#if SwigModule == "SwigDiagnosis"
bool ModularDiagnoser(const SystemVector&, const GeneratorVector&, GeneratorVector&);
SwigHelpEntry("Diagnosis", "Modular-diagnosis", "Boolean ModularDiagnoser(+In+ SystemVector GVArg, +In+ GeneratorVector KVArg, +Out+ GeneratorVector DVArg)");
#endif 

/* faudes-function "MsaObserver" */
#if SwigModule == "SwigObserver"
%rename(MsaObserver) calcMSAObserver;
long int calcMSAObserver(const Generator&, EventSet&);
SwigHelpEntry("Observer", "Observer", "Integer MsaObserver(+In+ Generator GArg, +InOut+ EventSet Sigma_h)");
#endif 

/* faudes-function "MsaObserverLcc" */
#if SwigModule == "SwigObserver"
%rename(MsaObserverLcc) calcMSAObserverLCC;
long int calcMSAObserverLCC(const Generator&, const EventSet&, EventSet&);
SwigHelpEntry("Observer", "Observer", "Integer MsaObserverLcc(+In+ Generator GArg, +In+ EventSet Sigma_c, +InOut+ EventSet Sigma_h)");
#endif 

/* faudes-function "MtcDeterministic" */
#if SwigModule == "SwigMultitasking"
%rename(MtcDeterministic) mtcDeterministic;
void mtcDeterministic(const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcDeterministic(+In+ MtcSystem G, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "MtcInvProject" */
#if SwigModule == "SwigMultitasking"
%rename(MtcInvProject) mtcInvProject;
void mtcInvProject(MtcSystem&, const EventSet&);
SwigHelpEntry("Multitasking", "Functions", " MtcInvProject(+InOut+ MtcSystem G0, +In+ EventSet Sigma)");
void mtcInvProject(const MtcSystem&, const EventSet&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcInvProject(+In+ MtcSystem G0, +In+ EventSet Sigma, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "MtcNaturalObserver" */
#if SwigModule == "SwigMultitasking"
%rename(MtcNaturalObserver) calcNaturalObserver;
void calcNaturalObserver(const MtcSystem&, EventSet&);
SwigHelpEntry("Multitasking", "Misc", " MtcNaturalObserver(+In+ MtcSystem GPlant, +InOut+ EventSet SigmaH)");
#endif 

/* faudes-function "MtcParallel" */
#if SwigModule == "SwigMultitasking"
%rename(MtcParallel) mtcParallel;
void mtcParallel(const MtcSystem&, const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcParallel(+In+ MtcSystem G1, +In+ MtcSystem G2, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "MtcProject" */
#if SwigModule == "SwigMultitasking"
%rename(MtcProject) mtcProject;
void mtcProject(const MtcSystem&, const EventSet&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcProject(+In+ MtcSystem G, +In+ EventSet Sigma0, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "MtcProjectNonDet" */
#if SwigModule == "SwigMultitasking"
%rename(MtcProjectNonDet) mtcProjectNonDet;
void mtcProjectNonDet(const MtcSystem&, const EventSet&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcProjectNonDet(+In+ MtcSystem G, +In+ EventSet Sigma0, +Out+ MtcSystem GRes)");
void mtcProjectNonDet(MtcSystem&, const EventSet&);
SwigHelpEntry("Multitasking", "Functions", " MtcProjectNonDet(+InOut+ MtcSystem G, +In+ EventSet Sigma0)");
#endif 

/* faudes-function "MtcStateMin" */
#if SwigModule == "SwigMultitasking"
%rename(MtcStateMin) mtcStateMin;
void mtcStateMin(const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Functions", " MtcStateMin(+In+ MtcSystem G, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "MtcSupConClosed" */
#if SwigModule == "SwigMultitasking"
%rename(MtcSupConClosed) mtcSupConClosed;
void mtcSupConClosed(const MtcSystem&, const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Synthesis", " MtcSupConClosed(+In+ MtcSystem GPlant, +In+ MtcSystem GSpec, +Out+ MtcSystem GSupervisor)");
#endif 

/* faudes-function "MtcSupConNB" */
#if SwigModule == "SwigMultitasking"
%rename(MtcSupConNB) mtcSupConNB;
void mtcSupConNB(const MtcSystem&, const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Synthesis", " MtcSupConNB(+In+ MtcSystem GPlant, +In+ MtcSystem GSpec, +Out+ MtcSystem GSupervisor)");
#endif 

/* faudes-function "NaturalObserverExtension" */
#if SwigModule == "SwigObserver"
%rename(NaturalObserverExtension) calcNaturalObserver;
long int calcNaturalObserver(const Generator&, EventSet&);
SwigHelpEntry("Observer", "Observer", "Integer NaturalObserverExtension(+In+ Generator GArg, +InOut+ EventSet Sigma_h)");
#endif 

/* faudes-function "NaturalObserverLcc" */
#if SwigModule == "SwigObserver"
%rename(NaturalObserverLcc) calcNaturalObserverLCC;
long int calcNaturalObserverLCC(const Generator&, const EventSet&, EventSet&);
SwigHelpEntry("Observer", "Observer", "Integer NaturalObserverLcc(+In+ Generator Plant, +In+ EventSet Sigma_c, +InOut+ EventSet Sigma_h)");
#endif 

/* faudes-function "NaturalObserverRelabeling" */
#if SwigModule == "SwigObserver"
%rename(NaturalObserverRelabeling) calcAbstAlphObs;
void calcAbstAlphObs(System&, EventSet&, EventSet&, EventRelabelMap&);
SwigHelpEntry("Observer", "Observer", " NaturalObserverRelabeling(+InOut+ System GPlant, +InOut+ EventSet SigmaHi, +Out+ EventSet SigmaHiNew, +Out+ EventRelabelMap Map)");
#endif 

/* faudes-function "OmegaClosure" */
#if SwigModule == "SwigCoreFaudes"
void OmegaClosure(Generator&);
SwigHelpEntry("Functions", "Language misc", " OmegaClosure(+InOut+ Generator GArg)");
#endif 

/* faudes-function "OmegaConNB" */
#if SwigModule == "SwigSynthesis"
void OmegaConNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaConNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void OmegaConNB(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaConNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "OmegaConNormNB" */
#if SwigModule == "SwigSynthesis"
void OmegaConNormNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaConNormNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void OmegaConNormNB(const Generator&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaConNormNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ EventSet AObs, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "OmegaParallel" */
#if SwigModule == "SwigCoreFaudes"
%rename(OmegaParallel) aOmegaParallel;
void aOmegaParallel(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " OmegaParallel(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
#endif 

/* faudes-function "OmegaProduct" */
#if SwigModule == "SwigCoreFaudes"
%rename(OmegaProduct) aOmegaProduct;
void aOmegaProduct(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " OmegaProduct(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
#endif 

/* faudes-function "OmegaSupConNB" */
#if SwigModule == "SwigSynthesis"
void OmegaSupConNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaSupConNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void OmegaSupConNB(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaSupConNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "OmegaSupConNormNB" */
#if SwigModule == "SwigSynthesis"
void OmegaSupConNormNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaSupConNormNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void OmegaSupConNormNB(const Generator&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " OmegaSupConNormNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ EventSet AObs, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "OmegaTrim" */
#if SwigModule == "SwigCoreFaudes"
void OmegaTrim(Generator&);
SwigHelpEntry("Functions", "Reachability", " OmegaTrim(+InOut+ Generator G)");
void OmegaTrim(const Generator&, Generator&);
SwigHelpEntry("Functions", "Reachability", " OmegaTrim(+In+ Generator GArg, +Out+ Generator GRes)");
#endif 

/* faudes-function "OptimalColorSet" */
#if SwigModule == "SwigMultitasking"
void OptimalColorSet(const MtcSystem&, ColorSet&, EventSet&);
SwigHelpEntry("Multitasking", "Misc", " OptimalColorSet(+In+ MtcSystem GPlant, +Out+ ColorSet Colors, +InOut+ EventSet SigmaH)");
#endif 

/* faudes-function "Parallel" */
#if SwigModule == "SwigCoreFaudes"
%rename(Parallel) aParallel;
void aParallel(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Parallel(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
void aParallel(const GeneratorVector&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Parallel(+In+ GeneratorVector GVec, +Out+ Generator GRes)");
void aParallel(const Generator&, const Generator&, ProductCompositionMap&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Parallel(+In+ Generator G1, +In+ Generator G2, +Out+ ProductCompositionMap CompMap, +Out+ Generator GRes)");
#endif 

/* faudes-function "PrefixClosure" */
#if SwigModule == "SwigCoreFaudes"
void PrefixClosure(Generator&);
SwigHelpEntry("Functions", "Language misc", " PrefixClosure(+InOut+ Generator GArg)");
#endif 

/* faudes-function "Product" */
#if SwigModule == "SwigCoreFaudes"
%rename(Product) aProduct;
void aProduct(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Product(+In+ Generator G1, +In+ Generator G2, +Out+ Generator GRes)");
void aProduct(const Generator&, const Generator&, ProductCompositionMap&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " Product(+In+ Generator G1, +In+ Generator G2, +Out+ ProductCompositionMap CompMap, +Out+ Generator GRes)");
#endif 

/* faudes-function "Project" */
#if SwigModule == "SwigCoreFaudes"
%rename(Project) aProject;
void aProject(const Generator&, const EventSet&, Generator&);
SwigHelpEntry("Functions", "Language misc", " Project(+In+ Generator G, +In+ EventSet Sigma0, +Out+ Generator GRes)");
#endif 

/* faudes-function "PushdownAccessible" */
#if SwigModule == "SwigPushdown"
void PushdownAccessible(const PushdownGenerator&, PushdownGenerator&);
SwigHelpEntry("Pushdown", "Context-free", " PushdownAccessible(+In+ PushdownGenerator Input, +Out+ PushdownGenerator Result)");
#endif 

/* faudes-function "PushdownBlockfree" */
#if SwigModule == "SwigPushdown"
void PushdownBlockfree(const PushdownGenerator&, PushdownGenerator&);
SwigHelpEntry("Pushdown", "Context-free", " PushdownBlockfree(+In+ PushdownGenerator Input, +Out+ PushdownGenerator Result)");
#endif 

/* faudes-function "PushdownConstructController" */
#if SwigModule == "SwigPushdown"
void PushdownConstructController(const PushdownGenerator&, const System&, PushdownGenerator&);
SwigHelpEntry("Pushdown", "Synthesis", " PushdownConstructController(+In+ PushdownGenerator Spec, +In+ System Plant, +Out+ PushdownGenerator Result)");
#endif 

/* faudes-function "RemoveIoDummyStates" */
#if SwigModule == "SwigIoSystem"
void RemoveIoDummyStates(IoSystem&);
#endif 

/* faudes-function "SelfLoop" */
#if SwigModule == "SwigCoreFaudes"
void SelfLoop(Generator&, const EventSet&);
SwigHelpEntry("Functions", "Language misc", " SelfLoop(+InOut+ Generator G, +In+ EventSet Sigma)");
#endif 

/* faudes-function "StateMin" */
#if SwigModule == "SwigCoreFaudes"
%rename(StateMin) aStateMin;
void aStateMin(const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " StateMin(+In+ Generator GArg, +Out+ Generator GRes)");
void aStateMin(Generator&);
SwigHelpEntry("Functions", "Generator misc", " StateMin(+InOut+ Generator G)");
#endif 

/* faudes-function "StronglyCoaccessible" */
#if SwigModule == "SwigMultitasking"
void StronglyCoaccessible(MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", " StronglyCoaccessible(+InOut+ MtcSystem G)");
void StronglyCoaccessible(const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", " StronglyCoaccessible(+In+ MtcSystem GArg, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "StronglyTrim" */
#if SwigModule == "SwigMultitasking"
void StronglyTrim(MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", " StronglyTrim(+InOut+ MtcSystem G)");
void StronglyTrim(const MtcSystem&, MtcSystem&);
SwigHelpEntry("Multitasking", "Reachability", " StronglyTrim(+In+ MtcSystem GArg, +Out+ MtcSystem GRes)");
#endif 

/* faudes-function "SupConClosed" */
#if SwigModule == "SwigSynthesis"
void SupConClosed(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConClosed(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void SupConClosed(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConClosed(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "SupConCmplClosed" */
#if SwigModule == "SwigSynthesis"
void SupConCmplClosed(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConCmplClosed(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void SupConCmplClosed(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConCmplClosed(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "SupConCmplNB" */
#if SwigModule == "SwigSynthesis"
void SupConCmplNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConCmplNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void SupConCmplNB(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConCmplNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "SupConNB" */
#if SwigModule == "SwigSynthesis"
void SupConNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void SupConNB(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "SupConNormClosed" */
#if SwigModule == "SwigSynthesis"
void SupConNormClosed(const Generator&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormClosed(+In+ Generator L, +In+ EventSet ACtrl, +In+ EventSet AObs, +In+ Generator E, +Out+ Generator GRes)");
void SupConNormClosed(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormClosed(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupConNormCmplNB" */
#if SwigModule == "SwigSynthesis"
void SupConNormCmplNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormCmplNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GRes)");
void SupConNormCmplNB(const Generator&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormCmplNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ EventSet AObs, +In+ Generator GSpec, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupConNormNB" */
#if SwigModule == "SwigSynthesis"
void SupConNormNB(const Generator&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormNB(+In+ Generator L, +In+ EventSet ACtrl, +In+ EventSet AObs, +In+ Generator E, +Out+ Generator GRes)");
void SupConNormNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupConNormNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupConditionalControllable" */
#if SwigModule == "SwigCoordinationControl"
void SupConditionalControllable(const System&, const GeneratorVector&, const EventSet&, const EventSet&, GeneratorVector&, Generator&);
SwigHelpEntry("CoordinationControl", "Decomposability", " SupConditionalControllable(+In+ System SpecGen, +In+ GeneratorVector genVector, +In+ EventSet ACntrl, +In+ EventSet InitEk, +Out+ GeneratorVector supVector, +Out+ Generator Coord)");
#endif 

/* faudes-function "SupNorm" */
#if SwigModule == "SwigSynthesis"
void SupNorm(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupNorm(+In+ Generator L, +In+ EventSet AObs, +In+ Generator K, +Out+ Generator GRes)");
void SupNorm(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupNorm(+In+ System GPlant, +In+ Generator GCand, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupNormClosed" */
#if SwigModule == "SwigSynthesis"
void SupNormClosed(const Generator&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupNormClosed(+In+ Generator L, +In+ EventSet AObs, +In+ Generator K, +Out+ Generator GRes)");
void SupNormClosed(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupNormClosed(+In+ System GPlant, +In+ Generator GCand, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupReduce" */
#if SwigModule == "SwigSynthesis"
void SupReduce(const System&, const System&, System&);
SwigHelpEntry("Synthesis", "Controllability", " SupReduce(+In+ System GPlant, +In+ System GSup, +Out+ System GReducedSup)");
#endif 

/* faudes-function "SupRelativelyPrefixClosed" */
#if SwigModule == "SwigSynthesis"
void SupRelativelyPrefixClosed(const Generator&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupRelativelyPrefixClosed(+In+ Generator GPlant, +In+ Generator GSpec, +Out+ Generator GRes)");
#endif 

/* faudes-function "SupTconNB" */
#if SwigModule == "SwigSynthesis"
void SupTconNB(const System&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupTconNB(+In+ System GPlant, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
void SupTconNB(const Generator&, const EventSet&, const EventSet&, const EventSet&, const Generator&, Generator&);
SwigHelpEntry("Synthesis", "Supremal sublanguage", " SupTconNB(+In+ Generator GPlant, +In+ EventSet AContr, +In+ EventSet AForcib, +In+ EventSet APreemp, +In+ Generator GSpec, +Out+ Generator GSupervisor)");
#endif 

/* faudes-function "Trim" */
#if SwigModule == "SwigCoreFaudes"
void Trim(Generator&);
SwigHelpEntry("Functions", "Reachability", " Trim(+InOut+ Generator G)");
void Trim(const Generator&, Generator&);
SwigHelpEntry("Functions", "Reachability", " Trim(+In+ Generator GArg, +Out+ Generator GRes)");
#endif 

/* faudes-function "UniqueInit" */
#if SwigModule == "SwigCoreFaudes"
void UniqueInit(Generator&);
SwigHelpEntry("Functions", "Generator misc", " UniqueInit(+InOut+ Generator G)");
void UniqueInit(const Generator&, Generator&);
SwigHelpEntry("Functions", "Generator misc", " UniqueInit(+In+ Generator G, +Out+ Generator GRes)");
#endif 

/* faudes-function "ccTrim" */
#if SwigModule == "SwigCoordinationControl"
bool ccTrim(const Generator&, Generator&);
SwigHelpEntry("CoordinationControl", "Trim", "Boolean ccTrim(+In+ Generator gen, +Out+ Generator trimGen)");
#endif 

