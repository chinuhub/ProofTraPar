/* rti2code: autogenerated libFAUDES rti registration: libFAUDES 2.26g synthesis-observer-observability-diagnosis-hiosys-iosystem-multitasking-coordinationcontrol-pushdown-timed-simulator-iodevice-luabindings */

namespace faudes {
/* Auto-register faudes types */
AutoRegisterType<Alphabet> gRti1RegisterAlphabet("Alphabet");
AutoRegisterXElementTag<Alphabet> gRti1XElementTagAlphabet("Alphabet", "Event");
AutoRegisterType<ColorSet> gRti5RegisterColorSet("ColorSet");
AutoRegisterXElementTag<ColorSet> gRti5XElementTagColorSet("ColorSet", "Color");
AutoRegisterType<xDevice> gRti8RegisterDeviceContainer("DeviceContainer");
AutoRegisterType<Diagnoser> gRti10RegisterDiagnoser("Diagnoser");
AutoRegisterType<EventSet> gRti12RegisterEventSet("EventSet");
AutoRegisterXElementTag<EventSet> gRti12XElementTagEventSet("EventSet", "Event");
AutoRegisterType<EventSetVector> gRti13RegisterEventSetVector("EventSetVector");
AutoRegisterType<AttributeFailureTypeMap> gRti14RegisterFailureTypeMap("FailureTypeMap");
AutoRegisterType<Generator> gRti15RegisterGenerator("Generator");
AutoRegisterType<GeneratorVector> gRti16RegisterGeneratorVector("GeneratorVector");
AutoRegisterType<IoSystem> gRti25RegisterIoSystem("IoSystem");
AutoRegisterType<IosEventSet> gRti26RegisterIosAlphabet("IosAlphabet");
AutoRegisterXElementTag<IosEventSet> gRti26XElementTagIosAlphabet("IosAlphabet", "Event");
AutoRegisterType<MtcSystem> gRti29RegisterMtcSystem("MtcSystem");
AutoRegisterType<ProductCompositionMap> gRti31RegisterProductCompositionMap("ProductCompositionMap");
AutoRegisterType<PushdownGenerator> gRti33RegisterPushdownGenerator("PushdownGenerator");
AutoRegisterType<sEventSet> gRti36RegisterSimulationAlphabet("SimulationAlphabet");
AutoRegisterXElementTag<sEventSet> gRti36XElementTagSimulationAlphabet("SimulationAlphabet", "Event");
AutoRegisterType<SimConditionSet> gRti37RegisterSimulationConditions("SimulationConditions");
AutoRegisterXElementTag<SimConditionSet> gRti37XElementTagSimulationConditions("SimulationConditions", "Condition");
AutoRegisterType<StateSet> gRti39RegisterStateSet("StateSet");
AutoRegisterXElementTag<StateSet> gRti39XElementTagStateSet("StateSet", "State");
AutoRegisterType<System> gRti41RegisterSystem("System");
AutoRegisterType<SystemVector> gRti42RegisterSystemVector("SystemVector");
AutoRegisterType<TransSet> gRti43RegisterTransSet("TransSet");
AutoRegisterXElementTag<TransSet> gRti43XElementTagTransSet("TransSet", "Tr");
} // namespace
namespace faudes {
/* Register faudes types */
void LoadRegisteredTypes(void) {
  TypeRegistry::G()->Insert<Alphabet>("Alphabet");
  TypeRegistry::G()->Insert<AttributeIosEvent>("AttributeIosEvent");
  TypeRegistry::G()->Insert<AttributeIosState>("AttributeIosState");
  TypeRegistry::G()->Insert<Boolean>("Boolean");
  TypeRegistry::G()->Insert<ColorSet>("ColorSet");
  TypeRegistry::G()->Insert<xDevice>("DeviceContainer");
  TypeRegistry::G()->Insert<DeviceExecutor>("DeviceExecutor");
  TypeRegistry::G()->Insert<Diagnoser>("Diagnoser");
  TypeRegistry::G()->Insert<EventRelabelMap>("EventRelabelMap");
  TypeRegistry::G()->Insert<EventSet>("EventSet");
  TypeRegistry::G()->Insert<EventSetVector>("EventSetVector");
  TypeRegistry::G()->Insert<AttributeFailureTypeMap>("FailureTypeMap");
  TypeRegistry::G()->Insert<Generator>("Generator");
  TypeRegistry::G()->Insert<GeneratorVector>("GeneratorVector");
  TypeRegistry::G()->Insert<HioConstraint>("HioConstraint");
  TypeRegistry::G()->Insert<HioController>("HioController");
  TypeRegistry::G()->Insert<HioEnvironment>("HioEnvironment");
  TypeRegistry::G()->Insert<HioEventFlags>("HioEventFlags");
  TypeRegistry::G()->Insert<HioPlant>("HioPlant");
  TypeRegistry::G()->Insert<HioStateFlags>("HioStateFlags");
  TypeRegistry::G()->Insert<Integer>("Integer");
  TypeRegistry::G()->Insert<IntegerVector>("IntegerVector");
  TypeRegistry::G()->Insert<IoSystem>("IoSystem");
  TypeRegistry::G()->Insert<IosEventSet>("IosAlphabet");
  TypeRegistry::G()->Insert<LoggingExecutor>("LoggingExecutor");
  TypeRegistry::G()->Insert<MtcSystem>("MtcSystem");
  TypeRegistry::G()->Insert<ParallelExecutor>("ParallelExecutor");
  TypeRegistry::G()->Insert<ProductCompositionMap>("ProductCompositionMap");
  TypeRegistry::G()->Insert<ProposingExecutor>("ProposingExecutor");
  TypeRegistry::G()->Insert<PushdownGenerator>("PushdownGenerator");
  TypeRegistry::G()->Insert<sEventSet>("SimulationAlphabet");
  TypeRegistry::G()->Insert<SimConditionSet>("SimulationConditions");
  TypeRegistry::G()->Insert<StateSet>("StateSet");
  TypeRegistry::G()->Insert<String>("String");
  TypeRegistry::G()->Insert<System>("System");
  TypeRegistry::G()->Insert<SystemVector>("SystemVector");
  TypeRegistry::G()->Insert<TransSet>("TransSet");
}
} // namespace
namespace faudes {
/* Register faudes functions */
void LoadRegisteredFunctions(void) {
  FunctionRegistry::G()->Insert<Rti0Accessible>("Accessible");
  FunctionRegistry::G()->Insert<Rti1SetDifference>("AlphabetDifference");
  FunctionRegistry::G()->Insert<Rti2SetEquality>("AlphabetEquality");
  FunctionRegistry::G()->Insert<Rti3AlphabetExtract>("AlphabetExtract");
  FunctionRegistry::G()->Insert<Rti4SetInclusion>("AlphabetInclusion");
  FunctionRegistry::G()->Insert<Rti5SetIntersection>("AlphabetIntersection");
  FunctionRegistry::G()->Insert<Rti6AlphabetLanguage>("AlphabetLanguage");
  FunctionRegistry::G()->Insert<Rti7SetUnion>("AlphabetUnion");
  FunctionRegistry::G()->Insert<Rti8Automaton>("Automaton");
  FunctionRegistry::G()->Insert<Rti9Coaccessible>("Coaccessible");
  FunctionRegistry::G()->Insert<Rti10Complete>("Complete");
  FunctionRegistry::G()->Insert<Rti11ConDecExtension>("ConDecExtension");
  FunctionRegistry::G()->Insert<Rti12DecentralizedDiagnoser>("DecentralizedDiagnoser");
  FunctionRegistry::G()->Insert<Rti13DecentralizedModularDiagnoser>("DecentralizedModularDiagnoser");
  FunctionRegistry::G()->Insert<Rti14aDeterministic>("Deterministic");
  FunctionRegistry::G()->Insert<Rti15EmptyLanguage>("EmptyLanguage");
  FunctionRegistry::G()->Insert<Rti16EmptyStringLanguage>("EmptyStringLanguage");
  FunctionRegistry::G()->Insert<Rti17EventDiagnoser>("EventDiagnoser");
  FunctionRegistry::G()->Insert<Rti18FullLanguage>("FullLanguage");
  FunctionRegistry::G()->Insert<Rti19HioFreeInput>("HioFreeInput");
  FunctionRegistry::G()->Insert<Rti20HioShuffle>("HioShuffle");
  FunctionRegistry::G()->Insert<Rti21HioStatePartition>("HioStatePartition");
  FunctionRegistry::G()->Insert<Rti22HioSynth>("HioSynth");
  FunctionRegistry::G()->Insert<Rti23HioSynthHierarchical>("HioSynthHierarchical");
  FunctionRegistry::G()->Insert<Rti24HioSynthMonolithic>("HioSynthMonolithic");
  FunctionRegistry::G()->Insert<Rti25insertRelabeledEvents>("InsertRelabeledEvents");
  FunctionRegistry::G()->Insert<Rti26IntegerSum>("IntegerSum");
  FunctionRegistry::G()->Insert<Rti27aInvProject>("InvProject");
  FunctionRegistry::G()->Insert<Rti28IoFreeInput>("IoFreeInput");
  FunctionRegistry::G()->Insert<Rti29IoStatePartition>("IoStatePartition");
  FunctionRegistry::G()->Insert<Rti30IoSynthesis>("IoSynthesis");
  FunctionRegistry::G()->Insert<Rti31IoSynthesisNB>("IoSynthesisNB");
  FunctionRegistry::G()->Insert<Rti32IsAccessible>("IsAccessible");
  FunctionRegistry::G()->Insert<Rti33IsCoDiagnosable>("IsCoDiagnosable");
  FunctionRegistry::G()->Insert<Rti34IsCoaccessible>("IsCoaccessible");
  FunctionRegistry::G()->Insert<Rti35IsComplete>("IsComplete");
  FunctionRegistry::G()->Insert<Rti36IsConditionalClosed>("IsConditionalClosed");
  FunctionRegistry::G()->Insert<Rti37IsConditionalControllable>("IsConditionalControllable");
  FunctionRegistry::G()->Insert<Rti38IsConditionalDecomposable>("IsConditionalDecomposable");
  FunctionRegistry::G()->Insert<Rti39IsControllable>("IsControllable");
  FunctionRegistry::G()->Insert<Rti40IsDeterministic>("IsDeterministic");
  FunctionRegistry::G()->Insert<Rti41IsEmptyLanguage>("IsEmptyLanguage");
  FunctionRegistry::G()->Insert<Rti42IsEventDiagnosable>("IsEventDiagnosable");
  FunctionRegistry::G()->Insert<Rti43IsHioConstraintForm>("IsHioConstraintForm");
  FunctionRegistry::G()->Insert<Rti44IsHioControllerForm>("IsHioControllerForm");
  FunctionRegistry::G()->Insert<Rti45IsHioEnvironmentForm>("IsHioEnvironmentForm");
  FunctionRegistry::G()->Insert<Rti46IsHioPlantForm>("IsHioPlantForm");
  FunctionRegistry::G()->Insert<Rti47IsIndicatorEventDiagnosable>("IsIndicatorEventDiagnosable");
  FunctionRegistry::G()->Insert<Rti48IsInputLocallyFree>("IsInputLocallyFree");
  FunctionRegistry::G()->Insert<Rti49IsInputOmegaFree>("IsInputOmegaFree");
  FunctionRegistry::G()->Insert<Rti50IsIoSystem>("IsIoSystem");
  FunctionRegistry::G()->Insert<Rti51IsLanguageDiagnosable>("IsLanguageDiagnosable");
  FunctionRegistry::G()->Insert<Rti52IsLCC>("IsLocallyControlConsistent");
  FunctionRegistry::G()->Insert<Rti53IsLoopPreservingObserver>("IsLoopPreservingObserver");
  FunctionRegistry::G()->Insert<Rti54IsModularDiagnosable>("IsModularDiagnosable");
  FunctionRegistry::G()->Insert<Rti55IsMSA>("IsMsaObserver");
  FunctionRegistry::G()->Insert<Rti56IsMtcObs>("IsMtcObserver");
  FunctionRegistry::G()->Insert<Rti57IsMutuallyControllable>("IsMutuallyControllable");
  FunctionRegistry::G()->Insert<Rti58IsObs>("IsNaturalObserver");
  FunctionRegistry::G()->Insert<Rti59IsNonblocking>("IsNonblocking");
  FunctionRegistry::G()->Insert<Rti60IsNormal>("IsNormal");
  FunctionRegistry::G()->Insert<Rti61IsOmegaClosed>("IsOmegaClosed");
  FunctionRegistry::G()->Insert<Rti62IsOmegaControllable>("IsOmegaControllable");
  FunctionRegistry::G()->Insert<Rti63IsOmegaTrim>("IsOmegaTrim");
  FunctionRegistry::G()->Insert<Rti64IsOCC>("IsOutputControlConsistent");
  FunctionRegistry::G()->Insert<Rti65IsPrefixClosed>("IsPrefixClosed");
  FunctionRegistry::G()->Insert<Rti66IsRelativelyMarked>("IsRelativelyMarked");
  FunctionRegistry::G()->Insert<Rti67IsRelativelyOmegaClosed>("IsRelativelyOmegaClosed");
  FunctionRegistry::G()->Insert<Rti68IsRelativelyPrefixClosed>("IsRelativelyPrefixClosed");
  FunctionRegistry::G()->Insert<Rti69IsStdSynthesisConsistent>("IsStdSynthesisConsistent");
  FunctionRegistry::G()->Insert<Rti70IsStronglyCoaccessible>("IsStronglyCoaccessible");
  FunctionRegistry::G()->Insert<Rti71IsStronglyTrim>("IsStronglyTrim");
  FunctionRegistry::G()->Insert<Rti72IsTrim>("IsTrim");
  FunctionRegistry::G()->Insert<Rti73KleeneClosure>("KleeneClosure");
  FunctionRegistry::G()->Insert<Rti74LanguageComplement>("LanguageComplement");
  FunctionRegistry::G()->Insert<Rti75LanguageConcatenate>("LanguageConcatenate");
  FunctionRegistry::G()->Insert<Rti76LanguageDiagnoser>("LanguageDiagnoser");
  FunctionRegistry::G()->Insert<Rti77LanguageDifference>("LanguageDifference");
  FunctionRegistry::G()->Insert<Rti78LanguageDisjoint>("LanguageDisjoint");
  FunctionRegistry::G()->Insert<Rti79LanguageEquality>("LanguageEquality");
  FunctionRegistry::G()->Insert<Rti80LanguageInclusion>("LanguageInclusion");
  FunctionRegistry::G()->Insert<Rti81LanguageIntersection>("LanguageIntersection");
  FunctionRegistry::G()->Insert<Rti82LanguageUnion>("LanguageUnion");
  FunctionRegistry::G()->Insert<Rti83LocalObservationConsistency>("LocalObservationConsistency");
  FunctionRegistry::G()->Insert<Rti84LoopPreservingObserver>("LoopPreservingObserver");
  FunctionRegistry::G()->Insert<Rti85MarkAllStates>("MarkAllStates");
  FunctionRegistry::G()->Insert<Rti86ModularDiagnoser>("ModularDiagnoser");
  FunctionRegistry::G()->Insert<Rti87calcMSAObserver>("MsaObserver");
  FunctionRegistry::G()->Insert<Rti88calcMSAObserverLCC>("MsaObserverLcc");
  FunctionRegistry::G()->Insert<Rti89mtcDeterministic>("MtcDeterministic");
  FunctionRegistry::G()->Insert<Rti90mtcInvProject>("MtcInvProject");
  FunctionRegistry::G()->Insert<Rti91calcNaturalObserver>("MtcNaturalObserver");
  FunctionRegistry::G()->Insert<Rti92mtcParallel>("MtcParallel");
  FunctionRegistry::G()->Insert<Rti93mtcProject>("MtcProject");
  FunctionRegistry::G()->Insert<Rti94mtcProjectNonDet>("MtcProjectNonDet");
  FunctionRegistry::G()->Insert<Rti95mtcStateMin>("MtcStateMin");
  FunctionRegistry::G()->Insert<Rti96mtcSupConClosed>("MtcSupConClosed");
  FunctionRegistry::G()->Insert<Rti97mtcSupConNB>("MtcSupConNB");
  FunctionRegistry::G()->Insert<Rti98calcNaturalObserver>("NaturalObserverExtension");
  FunctionRegistry::G()->Insert<Rti99calcNaturalObserverLCC>("NaturalObserverLcc");
  FunctionRegistry::G()->Insert<Rti100calcAbstAlphObs>("NaturalObserverRelabeling");
  FunctionRegistry::G()->Insert<Rti101OmegaClosure>("OmegaClosure");
  FunctionRegistry::G()->Insert<Rti102OmegaConNB>("OmegaConNB");
  FunctionRegistry::G()->Insert<Rti103OmegaConNormNB>("OmegaConNormNB");
  FunctionRegistry::G()->Insert<Rti104aOmegaParallel>("OmegaParallel");
  FunctionRegistry::G()->Insert<Rti105aOmegaProduct>("OmegaProduct");
  FunctionRegistry::G()->Insert<Rti106OmegaSupConNB>("OmegaSupConNB");
  FunctionRegistry::G()->Insert<Rti107OmegaSupConNormNB>("OmegaSupConNormNB");
  FunctionRegistry::G()->Insert<Rti108OmegaTrim>("OmegaTrim");
  FunctionRegistry::G()->Insert<Rti109OptimalColorSet>("OptimalColorSet");
  FunctionRegistry::G()->Insert<Rti110aParallel>("Parallel");
  FunctionRegistry::G()->Insert<Rti111PrefixClosure>("PrefixClosure");
  FunctionRegistry::G()->Insert<Rti112aProduct>("Product");
  FunctionRegistry::G()->Insert<Rti113aProject>("Project");
  FunctionRegistry::G()->Insert<Rti114PushdownAccessible>("PushdownAccessible");
  FunctionRegistry::G()->Insert<Rti115PushdownBlockfree>("PushdownBlockfree");
  FunctionRegistry::G()->Insert<Rti116PushdownConstructController>("PushdownConstructController");
  FunctionRegistry::G()->Insert<Rti117RemoveIoDummyStates>("RemoveIoDummyStates");
  FunctionRegistry::G()->Insert<Rti118SelfLoop>("SelfLoop");
  FunctionRegistry::G()->Insert<Rti119aStateMin>("StateMin");
  FunctionRegistry::G()->Insert<Rti120StronglyCoaccessible>("StronglyCoaccessible");
  FunctionRegistry::G()->Insert<Rti121StronglyTrim>("StronglyTrim");
  FunctionRegistry::G()->Insert<Rti122SupConClosed>("SupConClosed");
  FunctionRegistry::G()->Insert<Rti123SupConCmplClosed>("SupConCmplClosed");
  FunctionRegistry::G()->Insert<Rti124SupConCmplNB>("SupConCmplNB");
  FunctionRegistry::G()->Insert<Rti125SupConNB>("SupConNB");
  FunctionRegistry::G()->Insert<Rti126SupConNormClosed>("SupConNormClosed");
  FunctionRegistry::G()->Insert<Rti127SupConNormCmplNB>("SupConNormCmplNB");
  FunctionRegistry::G()->Insert<Rti128SupConNormNB>("SupConNormNB");
  FunctionRegistry::G()->Insert<Rti129SupConditionalControllable>("SupConditionalControllable");
  FunctionRegistry::G()->Insert<Rti130SupNorm>("SupNorm");
  FunctionRegistry::G()->Insert<Rti131SupNormClosed>("SupNormClosed");
  FunctionRegistry::G()->Insert<Rti132SupReduce>("SupReduce");
  FunctionRegistry::G()->Insert<Rti133SupRelativelyPrefixClosed>("SupRelativelyPrefixClosed");
  FunctionRegistry::G()->Insert<Rti134SupTconNB>("SupTconNB");
  FunctionRegistry::G()->Insert<Rti135Trim>("Trim");
  FunctionRegistry::G()->Insert<Rti136UniqueInit>("UniqueInit");
  FunctionRegistry::G()->Insert<Rti137ccTrim>("ccTrim");
}
} // namespace
