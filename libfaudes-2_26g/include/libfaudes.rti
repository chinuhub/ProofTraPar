<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Registry SYSTEM "http://www.faudes.org/dtd/1.0/registry.dtd">
<Registry>
<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Alphabet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Alphabet" ctype="faudes::Alphabet" autoregister="true">

<Documentation ref="corefaudes_alphabet.html#Alphabet">
Basic alphabet with controllability attributes.
</Documentation>
<Keywords>
CoreFaudes    events        "controllability alphabet" 
</Keywords>

<XElementTag value="Event"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type AttributeIosEvent -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IoSystem::AttributeIosEvent" ctype="faudes::AttributeIosEvent">

<Keywords>
IoSystem     
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type AttributeIosState -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IoSystem::AttributeIosState" ctype="faudes::AttributeIosState">

<Keywords>
IoSystem     
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Boolean -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Boolean" ctype="faudes::Boolean">

<Documentation ref="corefaudes_elementary.html#Boolean">
Elementary type to hold a boolean value true or false.
</Documentation>
<Keywords>
CoreFaudes    "elementary type"  true          false        
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ColorSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Multitasking::ColorSet" ctype="faudes::ColorSet" autoregister="true">

<Documentation ref="multitasking_index.html#ColorSet">
Set of colors for marking the state of a colored generator
</Documentation>
<Keywords>
Multitasking  generator     "colored marking"  colors       
</Keywords>

<XElementTag value="Color"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ComediDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::ComediDevice">

<Documentation ref="simulator_devices.html#ComediDevice">
Access digital IO hardware within the comedi framework.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
edge          comedi       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type D3RipUrtDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::D3RipUrtDevice">

<Documentation ref="simulator_devices.html#D3RipUrtDevice">
Synchronize events via D3RIP protocols.
</Documentation>
<Keywords>
Simulator     iodevice      D3RIP         ethernet      simulation    network      
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type DeviceContainer -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::DeviceContainer" ctype="faudes::xDevice" autoregister="true">

<Documentation ref="simulator_devices.html#DeviceContainer">
Merge individual IO devices.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
edge          comedi       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type DeviceExecutor -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::DeviceExecutor" ctype="faudes::DeviceExecutor">

<Documentation ref="simulator_details.html#DeviceExecutor">
Simulation of synchronized timed automata, incl. physical events and time.
</Documentation>
<Keywords>
Simulator     executor      simulation    "timed automata"  "physical events"  iodevice     
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Diagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Diagnosis::Diagnoser" ctype="faudes::Diagnoser" autoregister="true">

<Documentation ref="diagnosis_event.html#Diagnoser">
Generator with state estimate attribute for event-diagnosis.
</Documentation>
<Keywords>
Diagnosis     event-diagnosis  diagnoser     generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type EventRelabelMap -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Observer::EventRelabelMap" ctype="faudes::EventRelabelMap">

<Documentation ref="observer_misc.html#EventRelabelMap">
Map from indices to sets of indexes for re-labeling events.
</Documentation>
<Keywords>
Observer      misc          "relabel event"  map          
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type EventSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::EventSet" ctype="faudes::EventSet" autoregister="true">

<Documentation ref="corefaudes_alphabet.html#EventSet">
Basic alphabet.
</Documentation>
<Keywords>
CoreFaudes    events        alphabet     
</Keywords>

<XElementTag value="Event"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type EventSetVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::EventSetVector" ctype="faudes::EventSetVector" autoregister="true">

<Documentation ref="corefaudes_vector.html#EventSetVector">
Vector of alphabets
</Documentation>
<Keywords>
CoreFaudes    vector        eventset      alphabet     
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type FailureTypeMap -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Diagnosis::FailureTypeMap" ctype="faudes::AttributeFailureTypeMap" autoregister="true">

<Documentation ref="diagnosis_event.html#FailureTypeMap">
Specification of Failure Types
</Documentation>
<Keywords>
Diagnosis     event-diagnosis  "failure-type map" 
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Generator -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Generator" ctype="faudes::Generator" autoregister="true">

<Documentation ref="corefaudes_generator.html#Generator">
Basic generator model G=(Sigma,Q,delta,Qo,Qm).
</Documentation>
<Keywords>
CoreFaudes    generator     states        events        transitions  
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type GeneratorVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::GeneratorVector" ctype="faudes::GeneratorVector" autoregister="true">

<Documentation ref="corefaudes_vector.html#GeneratorVector">
Vector of generators
</Documentation>
<Keywords>
CoreFaudes    vector        generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioConstraint -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioConstraint" ctype="faudes::HioConstraint">

<Documentation ref="hiosys_types.html#constraint">
Generator with I/O-constraint state and event attributes.
</Documentation>
<Keywords>
HioSys        "io systems"  "constraint model"  generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioController -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioController" ctype="faudes::HioController">

<Documentation ref="hiosys_types.html#controller">
Generator with I/O-controller state and event attributes.
</Documentation>
<Keywords>
HioSys        "io systems"  "controller model"  generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioEnvironment -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioEnvironment" ctype="faudes::HioEnvironment">

<Documentation ref="hiosys_types.html#environment">
Generator with I/O-environment state and event attributes.
</Documentation>
<Keywords>
HioSys        "io systems"  "environment model"  generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioEventFlags -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioEventFlags" ctype="faudes::HioEventFlags">

<Keywords>
HioSys       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioPlant -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioPlant" ctype="faudes::HioPlant">

<Documentation ref="hiosys_types.html#plant">
Generator with I/O-plant state and event attributes.
</Documentation>
<Keywords>
HioSys        "io systems"  "plant model"  generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type HioStateFlags -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="HioSys::HioStateFlags" ctype="faudes::HioStateFlags">

<Keywords>
HioSys       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type Integer -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::Integer" ctype="faudes::Integer">

<Documentation ref="corefaudes_elementary.html#Integer">
Elementary type to hold a 32bit signed integer value.
</Documentation>
<Keywords>
CoreFaudes    "elementary type" 
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type IntegerVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::IntegerVector" ctype="faudes::IntegerVector">

<Documentation ref="corefaudes_elementary.html#IntegerVector">
Vector of integers
</Documentation>
<Keywords>
CoreFaudes    "elementary type"  vector        integer      
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type IoSystem -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IoSystem::IoSystem" ctype="faudes::IoSystem" autoregister="true">

<Documentation ref="iosystem_sysdef.html#IoSystem">
Generator with I/O system state and event attributes.
</Documentation>
<Keywords>
IoSystem      "io systems"  "plant model"  generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type IosAlphabet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IoSystem::IosAlphabet" ctype="faudes::IosEventSet" autoregister="true">


<XElementTag value="Event"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type LoggingExecutor -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::LoggingExecutor" ctype="faudes::LoggingExecutor">

<Documentation ref="simulator_details.html#LoggingExecutor">
Simulation of synchronized timed automata, incl logging.
</Documentation>
<Keywords>
Simulator     executor      simulation    "timed automata"  logging      
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ModbusDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::ModbusDevice">

<Documentation ref="simulator_devices.html#ModbusDevice">
Synchronize process image via Modbus/TCP protocol.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
Modbus       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type MtcSystem -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Multitasking::MtcSystem" ctype="faudes::MtcSystem" autoregister="true">

<Documentation ref="multitasking_index.html#MtcSystem">
Genarator model woth colored markings.
</Documentation>
<Keywords>
Multitasking  generator     "colored marking"  colors       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ParallelExecutor -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::ParallelExecutor" ctype="faudes::ParallelExecutor">

<Documentation ref="simulator_details.html#ParallelExecutor">
Basic simulation of synchronized timed automata.
</Documentation>
<Keywords>
Simulator     executor      simulation    "timed automata" 
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ProductCompositionMap -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::ProductCompositionMap" ctype="faudes::ProductCompositionMap" autoregister="true">


</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type ProposingExecutor -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::ProposingExecutor" ctype="faudes::ProposingExecutor">

<Documentation ref="simulator_details.html#ProposingExecutor">
Simulation of synchronized timed automata, incl. stochastic execution.
</Documentation>
<Keywords>
Simulator     executor      simulation    "timed automata"  stochastic   
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type PushdownGenerator -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Pushdown::PushdownGenerator" ctype="faudes::PushdownGenerator" autoregister="true">

<Documentation ref="pushdown_index.html#PushdownGenerator">
Pushdown generator model G=(Sigma,Q,delta,Qo,Qm,Gamma,Box).
</Documentation>
<Keywords>
Pushdown      generator    
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SignalDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::SignalDevice">

<Documentation ref="simulator_devices.html#SignalDevice">
Abstract interface for signal based event detection and execution.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
edge         
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SimplenetDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::SimplenetDevice">

<Documentation ref="simulator_devices.html#SimplenetDevice">
Network based communication of events.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     network      
tcp/ip       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SimulationAlphabet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::SimulationAlphabet" ctype="faudes::sEventSet" autoregister="true">


<XElementTag value="Event"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SimulationConditions -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="Simulator::SimulationConditions" ctype="faudes::SimConditionSet" autoregister="true">


<XElementTag value="Condition"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SpiDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::SpiDevice">

<Documentation ref="simulator_devices.html#SpiDevice">
Synchronize process image via serial interface.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
"serial interface" 
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type StateSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::StateSet" ctype="faudes::StateSet" autoregister="true">


<XElementTag value="State"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type String -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::String" ctype="faudes::String">

<Documentation ref="corefaudes_elementary.html#String">
Elementary type to hold an ASCII encoded string
</Documentation>
<Keywords>
CoreFaudes    "elementary type" 
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type System -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::System" ctype="faudes::System" autoregister="true">

<Documentation ref="corefaudes_generator.html#System">
Generator model G=(Sigma,Q,delta,Qo,Qm) with controllability attributes.
</Documentation>
<Keywords>
CoreFaudes    generator     system        "controllablility attribute"  states        events       
transitions  
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type SystemVector -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::SystemVector" ctype="faudes::SystemVector" autoregister="true">

<Documentation ref="corefaudes_vector.html#SystemVector">
Vector of systems
</Documentation>
<Keywords>
CoreFaudes    vector        generator     system       
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type TransSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="CoreFaudes::TransSet" ctype="faudes::TransSet" autoregister="true">


<XElementTag value="Tr"/>
</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Type WagoDevice -->
<!-- =================================================== -->
<!-- =================================================== -->

<TypeDefinition name="IODevice::WagoDevice">

<Documentation ref="simulator_devices.html#WagoDevice">
Access digital IO hardware by Wago Kbus interface.
</Documentation>
<Keywords>
Simulator     iodevice      executor      simulation    interface     hardware     
kbus          wago         
</Keywords>

</TypeDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Accessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Accessible" ctype="faudes::Accessible">

<Documentation ref="corefaudes_reachability.html#Accessible">
Delete non-accessible states and transitions.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     accessible    reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=Acc(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="GRes:=Acc(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetDifference -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetDifference" ctype="faudes::SetDifference">

<Documentation ref="corefaudes_alphabet.html#AlphabetDifference">
Difference of two alphabets.
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      difference   
</Keywords>

<VariantSignatures>
<Signature name="Sigma=Sigma1 - Sigma2">
<Parameter name="Sigma1" ftype="EventSet" access="In"/>
<Parameter name="Sigma2" ftype="EventSet" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetEquality -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetEquality" ctype="faudes::SetEquality">

<Documentation ref="corefaudes_alphabet.html#AlphabetEquality">
Tests whether two alphabets match.
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      equality     
</Keywords>

<VariantSignatures>
<Signature name="Sigma1 == Sigma2">
<Parameter name="Sigma1" ftype="EventSet" access="In"/>
<Parameter name="Sigma2" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetExtract -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetExtract" ctype="faudes::AlphabetExtract">

<Documentation ref="corefaudes_alphabet.html#AlphabetExtract">
Extract alphabet from generator.
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      difference   
</Keywords>

<VariantSignatures>
<Signature name="Sigma(Gen)">
<Parameter name="Gen" ftype="Generator" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetInclusion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetInclusion" ctype="faudes::SetInclusion">

<Documentation ref="corefaudes_alphabet.html#AlphabetInclusion">
Tests whether an alphabet includes another alphabet.
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      inclusion    
</Keywords>

<VariantSignatures>
<Signature name="Sigma1 &lt;= Sigma2">
<Parameter name="Sigma1" ftype="EventSet" access="In"/>
<Parameter name="Sigma2" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetIntersection -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetIntersection" ctype="faudes::SetIntersection">

<Documentation ref="corefaudes_alphabet.html#AlphabetIntersection">
Intersection over alphabets.
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      intersection 
</Keywords>

<VariantSignatures>

<Signature name="Sigma=Sigma1 ^ Sigma2">
<Parameter name="Sigma1" ftype="EventSet" access="In"/>
<Parameter name="Sigma2" ftype="EventSet" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="Out"/>
</Signature>

<Signature name="Sigma = ^_i(Sigma_i)">
<Parameter name="AVec" ftype="EventSetVector" access="In"/>
<Parameter name="ARes" ftype="EventSet" access="Out"/>
</Signature>

<Signature name="Sigma = ^_i(Sigma(Gen_i))">
<Parameter name="GVec" ftype="GeneratorVector" access="In"/>
<Parameter name="ARes" ftype="EventSet" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetLanguage" ctype="faudes::AlphabetLanguage">

<Documentation ref="corefaudes_regular.html#AlphabetLanguage">
Generator with Lm(G)=Sigma.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      full         
regular      
</Keywords>

<VariantSignatures>
<Signature name="Lm(GRes) = Sigma">
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function AlphabetUnion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::AlphabetUnion" ctype="faudes::SetUnion">

<Documentation ref="corefaudes_alphabet.html#AlphabetUnion">
Union over Alphabets
</Documentation>
<Keywords>
CoreFaudes    EventSet      functions     alphabet      union        
</Keywords>

<VariantSignatures>

<Signature name="Sigma=Sigma1 v Sigma2">
<Parameter name="Sigma1" ftype="EventSet" access="In"/>
<Parameter name="Sigma2" ftype="EventSet" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="Out"/>
</Signature>

<Signature name="Sigma = v_i(Sigma_i)">
<Parameter name="AVec" ftype="EventSetVector" access="In"/>
<Parameter name="ARes" ftype="EventSet" access="Out"/>
</Signature>

<Signature name="Sigma = v_i(Sigma(Gen_i))">
<Parameter name="GVec" ftype="GeneratorVector" access="In"/>
<Parameter name="ARes" ftype="EventSet" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Automaton -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Automaton" ctype="faudes::Automaton">

<Documentation ref="corefaudes_genmisc.html#Automaton">
Convert generator to formal automaton.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  generator     automaton    
</Keywords>

<VariantSignatures>

<Signature name="Automaton(GArg)">
<Parameter name="GArg" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="Automaton(GArg, Sigma)">
<Parameter name="GArg" ftype="Generator" access="InOut"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Coaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Coaccessible" ctype="faudes::Coaccessible">

<Documentation ref="corefaudes_reachability.html#Coaccessible">
Delete non-coaccessible states and transitions.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     accessible    reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=CoAcc(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="GRes:=CoAcc(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Complete -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Complete" ctype="faudes::Complete">

<Documentation ref="corefaudes_reachability.html#Complete">
Delete states that evolve into a terminal state.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     accessible    reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=Complete(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="GRes:=Complete(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="G:=Complete(G,SigmaO)">
<Parameter name="G" ftype="Generator" access="InOut"/>
<Parameter name="SigmaO" ftype="EventSet" access="In"/>
</Signature>

<Signature name="GRes:=Complete(G,SigmaO)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="SigmaO" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function ConDecExtension -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::ConDecExtension" ctype="faudes::ConDecExtension">

<Documentation ref="coordinationcontrol_index.html#ConDecExtension">
Extension of Ek for K to become conditionally decomposable.
</Documentation>
<Keywords>
CoordinationControl  decomposability  generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="ConDecExtension(gen,alphVector,ek)">
<Parameter name="gen" ftype="System" access="In"/>
<Parameter name="alphVector" ftype="EventSetVector" access="In"/>
<Parameter name="ek" ftype="EventSet" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function DecentralizedDiagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::DecentralizedDiagnoser" ctype="faudes::DecentralizedDiagnoser">

<Documentation ref="diagnosis_decentralized.html#DecentralizedDiagnoser">
Computes decentralized diagnosers for multiple local sites.
</Documentation>
<Keywords>
Diagnosis     decentralized-diagnosis  co-diagnosability  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="DecentralizedDiagnoser(GArg,KArg,AVArg,DVArg,BRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="KArg" ftype="Generator" access="In"/>
<Parameter name="AVArg" ftype="EventSetVector" access="In"/>
<Parameter name="DVArg" ftype="GeneratorVector" access="Out"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function DecentralizedModularDiagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::DecentralizedModularDiagnoser" ctype="faudes::DecentralizedModularDiagnoser">

<Documentation ref="diagnosis_decentralized.html#DecentralizedModularDiagnoser">
Computes decentralized diagnosers for systems that consist of multiple components.
</Documentation>
<Keywords>
Diagnosis     decentralized-diagnosis  co-diagnosability  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="DecentralizedModularDiagnoser(GVArg,KArg,DVArg)">
<Parameter name="GVArg" ftype="SystemVector" access="In"/>
<Parameter name="KArg" ftype="Generator" access="In"/>
<Parameter name="DVArg" ftype="GeneratorVector" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Deterministic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Deterministic" ctype="faudes::aDeterministic">

<Documentation ref="corefaudes_statemin.html#Deterministic">
Powerset construction to enforce determinism.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism  
</Keywords>

<VariantSignatures>
<Signature name="Deterministic(G,GRes)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function EmptyLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::EmptyLanguage" ctype="faudes::EmptyLanguage">

<Documentation ref="corefaudes_genmisc.html#EmptyLanguage">
Set generator to mark empty language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      regular      
empty        
</Keywords>

<VariantSignatures>
<Signature name="Lm(GRes) := 0">
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function EmptyStringLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::EmptyStringLanguage" ctype="faudes::EmptyStringLanguage">

<Documentation ref="corefaudes_regular.html#EmptyStringLanguage">
Generator with Lm(G)={epsilon}.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      regular      
empty        
</Keywords>

<VariantSignatures>
<Signature name="Lm(GRes) = {epsilon}">
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function EventDiagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::EventDiagnoser" ctype="faudes::EventDiagnoser">

<Documentation ref="diagnosis_event.html#EventDiagnoser">
Computes event-diagnoser w.r.t. failure types.
</Documentation>
<Keywords>
Diagnosis     event-diagnosis  diagnoser     "comupte diagnoser" 
</Keywords>

<VariantSignatures>
<Signature name="EventDiagnoser(Gen,FailureTypeMap,Diagnoser)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="FArg" ftype="FailureTypeMap" access="In"/>
<Parameter name="GRes" ftype="Diagnoser" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function FullLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::FullLanguage" ctype="faudes::FullLanguage">

<Documentation ref="corefaudes_regular.html#FullLanguage">
Generator with Lm(G)=Sigma*.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      full         
regular      
</Keywords>

<VariantSignatures>
<Signature name="L(GRes) = Sigma*">
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioFreeInput -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioFreeInput" ctype="faudes::HioFreeInput">

<Documentation ref="hiosys_test.html#HioFreeInput">
Enforces free input for I/O dynamics by adding error behaviour.
</Documentation>
<Keywords>
HioSys        "io form"     input        
</Keywords>

<VariantSignatures>

<Signature name="HioFreeInput(Plant)">
<Parameter name="GArg" ftype="HioPlant" access="InOut"/>
</Signature>

<Signature name="HioFreeInput(Controller)">
<Parameter name="GArg" ftype="HioController" access="InOut"/>
</Signature>

<Signature name="HioFreeInput(Environment)">
<Parameter name="GArg" ftype="HioEnvironment" access="InOut"/>
</Signature>

<Signature name="HioFreeInput(Constraint)">
<Parameter name="GArg" ftype="HioConstraint" access="InOut"/>
</Signature>

<Signature name="HioFreeInput(GArg,U,Y,GRes,StrErr1,StrErr2)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="U" ftype="EventSet" access="In"/>
<Parameter name="Y" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
<Parameter name="StrErr1" ftype="String" access="In"/>
<Parameter name="StrErr2" ftype="String" access="In"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioShuffle -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioShuffle" ctype="faudes::HioShuffle">

<Documentation ref="hiosys_shuffle.html">
Shuffle-composition of two HioPlant systems.
</Documentation>
<Keywords>
HioSys        composition   shuffle       "io plant"   
</Keywords>

<VariantSignatures>

<Signature name="GRes =  GArg1 ||_io GArg2">
<Parameter name="GArg1" ftype="HioPlant" access="In"/>
<Parameter name="GArg2" ftype="HioPlant" access="In"/>
<Parameter name="GRes" ftype="HioPlant" access="Out"/>
</Signature>

<Signature name="GRes =  HioShuffle(...)">
<Parameter name="GArg1" ftype="Generator" access="In"/>
<Parameter name="GArg2" ftype="Generator" access="In"/>
<Parameter name="Yp" ftype="EventSet" access="In"/>
<Parameter name="Up" ftype="EventSet" access="In"/>
<Parameter name="Ye" ftype="EventSet" access="In"/>
<Parameter name="Ue" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioStatePartition -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioStatePartition" ctype="faudes::HioStatePartition">

<Keywords>
HioSys       
</Keywords>

<VariantSignatures>

<Signature name="HioStatePartition(Plant)">
<Parameter name="GArg" ftype="HioPlant" access="InOut"/>
</Signature>

<Signature name="HioStatePartition(Controller)">
<Parameter name="GArg" ftype="HioController" access="InOut"/>
</Signature>

<Signature name="HioStatePartition(Environment)">
<Parameter name="GArg" ftype="HioEnvironment" access="InOut"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioSynth -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioSynth" ctype="faudes::HioSynth">

<Documentation ref="hiosys_synth.html#HioSynth">
Basic I/O controller synthesis procedure, without   parameter check.
</Documentation>
<Keywords>
HioSys        synthesis    
</Keywords>

<VariantSignatures>
<Signature name="Core Synthesis Algorithm">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GConstr" ftype="Generator" access="In"/>
<Parameter name="GConstrLoc" ftype="Generator" access="In"/>
<Parameter name="Yc" ftype="EventSet" access="In"/>
<Parameter name="Uc" ftype="EventSet" access="In"/>
<Parameter name="Yp" ftype="EventSet" access="In"/>
<Parameter name="Up" ftype="EventSet" access="In"/>
<Parameter name="Yel" ftype="EventSet" access="In"/>
<Parameter name="Uel" ftype="EventSet" access="In"/>
<Parameter name="GController" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioSynthHierarchical -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioSynthHierarchical" ctype="faudes::HioSynthHierarchical">

<Documentation ref="hiosys_synth.html#HioSynthHierarchical">
I/O-Controller synthesis, hierarchical version.
</Documentation>
<Keywords>
HioSys        synthesis    
</Keywords>

<VariantSignatures>
<Signature name="Hierarchical synthesis">
<Parameter name="GPlant" ftype="HioPlant" access="In"/>
<Parameter name="GEnv" ftype="HioEnvironment" access="In"/>
<Parameter name="GSpec" ftype="HioPlant" access="In"/>
<Parameter name="GConstrInt" ftype="Generator" access="In"/>
<Parameter name="GConstrC" ftype="HioConstraint" access="In"/>
<Parameter name="GConstrL" ftype="HioConstraint" access="In"/>
<Parameter name="GController" ftype="HioController" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function HioSynthMonolithic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::HioSynthMonolithic" ctype="faudes::HioSynthMonolithic">

<Documentation ref="hiosys_synth.html#HioSynthMonolithic">
I/O-Controller synthesis, monolithic version.
</Documentation>
<Keywords>
HioSys        synthesis    
</Keywords>

<VariantSignatures>
<Signature name="Monolithic Synthesis">
<Parameter name="GPlant" ftype="HioPlant" access="In"/>
<Parameter name="GSpec" ftype="HioPlant" access="In"/>
<Parameter name="GConstrC" ftype="HioConstraint" access="In"/>
<Parameter name="GConstrP" ftype="HioConstraint" access="In"/>
<Parameter name="GConstrE" ftype="HioConstraint" access="In"/>
<Parameter name="GController" ftype="HioController" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function InsertRelabeledEvents -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::InsertRelabeledEvents" ctype="faudes::insertRelabeledEvents">

<Documentation ref="observer_misc.html#InsertRelabeledEvents">
Apply relabeling map to specified generator.
</Documentation>
<Keywords>
Observer      misc          relabel       map          
</Keywords>

<VariantSignatures>

<Signature name="Insert(Plant,RelabelMap)">
<Parameter name="GPlant" ftype="System" access="InOut"/>
<Parameter name="Map" ftype="EventRelabelMap" access="In"/>
</Signature>

<Signature name="Insert(Plant,RelabelMap,SigmaNew)">
<Parameter name="GPlant" ftype="System" access="InOut"/>
<Parameter name="Map" ftype="EventRelabelMap" access="In"/>
<Parameter name="SigmaNew" ftype="EventSet" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IntegerSum -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IntegerSum" ctype="faudes::IntegerSum">

<Documentation ref="corefaudes_elementary.html#IntegerSum">
Sum of integer arguments.
</Documentation>
<Keywords>
CoreFaudes    integer       "elemetary types" 
</Keywords>

<VariantSignatures>

<Signature name="IRes=I_1+I_2">
<Parameter name="I_1" ftype="Integer" access="In"/>
<Parameter name="I_2" ftype="Integer" access="In"/>
<Parameter name="IRes" ftype="Integer" access="Out" creturn="true"/>
</Signature>

<Signature name="IRes=Sum_i I_i">
<Parameter name="IVec" ftype="IntegerVector" access="In"/>
<Parameter name="IRes" ftype="Integer" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function InvProject -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::InvProject" ctype="faudes::aInvProject">

<Documentation ref="corefaudes_projection.html#InvProject">
Inverse projection of marked and generated language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  "language projection" 
</Keywords>

<VariantSignatures>

<Signature name="InvProject(G0,Sigma)">
<Parameter name="G0" ftype="Generator" access="InOut"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
</Signature>

<Signature name="InvProject(G0,Sigma,GRes)">
<Parameter name="G0" ftype="Generator" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IoFreeInput -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IoFreeInput" ctype="faudes::IoFreeInput">

<Documentation ref="iosystem_sysdef.html#IoFreeInput">
Inserts transitions to obtain a free input.
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator     "free input" 
</Keywords>

<VariantSignatures>

<Signature name="IoFreeInput(GArg)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
</Signature>

<Signature name="IoFreeInput(GArg,SigU)">
<Parameter name="GArg" ftype="Generator" access="InOut"/>
<Parameter name="SigU" ftype="EventSet" access="InOut"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IoStatePartition -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IoStatePartition" ctype="faudes::IoStatePartition">

<Keywords>
IoSystem     
</Keywords>

<VariantSignatures>
<Signature name="IoStatePartition(System)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IoSynthesis -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IoSynthesis" ctype="faudes::IoSynthesis">

<Documentation ref="iosystem_synth.html#IoSynthesis">
Controller synthesis for I/O systems.
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator     synthesis    
</Keywords>

<VariantSignatures>
<Signature name="IoSynthesis(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="IoSystem" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="IoSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IoSynthesisNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IoSynthesisNB" ctype="faudes::IoSynthesisNB">

<Documentation ref="iosystem_synth.html#IoSynthesisNB">
Controller synthesis for I/O systems (marked languages).
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator     synthesis    
</Keywords>

<VariantSignatures>
<Signature name="IoSynthesisNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="IoSystem" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="IoSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsAccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsAccessible" ctype="faudes::IsAccessible">

<Documentation ref="corefaudes_reachability.html#IsAccessible">
Tests a generator for accessibility.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     accessible    reachable    
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsCoDiagnosable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsCoDiagnosable" ctype="faudes::IsCoDiagnosable">

<Documentation ref="diagnosis_decentralized.html#IsCoDiagnosable">
Tests for co-diagnosability w.r.t. local observations.
</Documentation>
<Keywords>
Diagnosis     decentralized-diagnosis  co-diagnosability  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="IsCoDiagnosable(GArg,KArg,AVArg,BRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="KArg" ftype="Generator" access="In"/>
<Parameter name="AVArg" ftype="EventSetVector" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsCoaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsCoaccessible" ctype="faudes::IsCoaccessible">

<Documentation ref="corefaudes_reachability.html#IsCoaccessible">
Tests a generator for coaccessibility.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     coaccessible  reachable    
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsComplete -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsComplete" ctype="faudes::IsComplete">

<Documentation ref="corefaudes_reachability.html#IsComplete">
Test completeness of a generator.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     complete      reachable    
</Keywords>

<VariantSignatures>

<Signature name="IsComplete(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsComplete(G,SigmaO)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="SigmaO" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsConditionalClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::IsConditionalClosed" ctype="faudes::IsConditionalClosed">

<Documentation ref="coordinationcontrol_index.html#Conditionalclosedness">
Tests for conditional closedness.
</Documentation>
<Keywords>
CoordinationControl  closedness    generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="IsConditionalClosed(specVect,pk,genVect,gk)">
<Parameter name="specVect" ftype="GeneratorVector" access="In"/>
<Parameter name="pk" ftype="Generator" access="In"/>
<Parameter name="genVect" ftype="GeneratorVector" access="In"/>
<Parameter name="gk" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsConditionalControllable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::IsConditionalControllable" ctype="faudes::IsConditionalControllable">

<Documentation ref="coordinationcontrol_index.html#Conditionalcontrollable">
Tests for conditional controllability.
</Documentation>
<Keywords>
CoordinationControl  controllability  generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="IsConditionalControllable(specVect,pk,genVect,gk,ACntrl)">
<Parameter name="specVect" ftype="GeneratorVector" access="In"/>
<Parameter name="pk" ftype="Generator" access="In"/>
<Parameter name="genVect" ftype="GeneratorVector" access="In"/>
<Parameter name="gk" ftype="Generator" access="In"/>
<Parameter name="ACntrl" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsConditionalDecomposable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::IsConditionalDecomposable" ctype="faudes::IsConditionalDecomposable">

<Documentation ref="coordinationcontrol_index.html#Conditionaldecomposability">
Tests for conditional decomposability.
</Documentation>
<Keywords>
CoordinationControl  decomposability  generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="IsConditionalDecomposable(gen,alphVector,ek,proof)">
<Parameter name="gen" ftype="System" access="In"/>
<Parameter name="alphVector" ftype="EventSetVector" access="In"/>
<Parameter name="ek" ftype="EventSet" access="In"/>
<Parameter name="proof" ftype="System" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsControllable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsControllable" ctype="faudes::IsControllable">

<Documentation ref="synthesis_controllability.html#IsControllable">
Tests controllablity condition.
</Documentation>
<Keywords>
Synthesis     controllability  generator     controllable  supervisor   
</Keywords>

<VariantSignatures>

<Signature name="IsControllabel(G,Sigma,K)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="ACntrl" ftype="EventSet" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsControllabel(G,K)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsDeterministic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsDeterministic" ctype="faudes::IsDeterministic">

<Documentation ref="corefaudes_statemin.html#IsDeterministic">
Test for determinsim.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism  
</Keywords>

<VariantSignatures>
<Signature name="IsDeterministic(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsEmptyLanguage -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsEmptyLanguage" ctype="faudes::IsEmptyLanguage">

<Documentation ref="corefaudes_genmisc.html#IsEmptyLanguage">
Test Generator G for empty marked language Lm(G).
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      regular      
empty        
</Keywords>

<VariantSignatures>
<Signature name="Lm(GArg) == 0">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsEventDiagnosable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsEventDiagnosable" ctype="faudes::IsEventDiagnosable">

<Documentation ref="diagnosis_event.html#IsEventDiagnosable">
Tests for event-diagnosability w.r.t. failure types.
</Documentation>
<Keywords>
Diagnosis     event-diagnosis  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="IsEventDiagnosable(GArg,FMapArg,BRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="FArg" ftype="FailureTypeMap" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsHioConstraintForm -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::IsHioConstraintForm" ctype="faudes::IsHioConstraintForm">

<Documentation ref="hiosys_test.html#IsHioConstraintForm">
Test for dynamics compatible with the formal definition of I/O constraints.
</Documentation>
<Keywords>
HioSys        "io form"     "constraint model"  generator    
</Keywords>

<VariantSignatures>
<Signature name="IsHioConstraintForm(GArg,BRes)">
<Parameter name="GArg" ftype="HioConstraint" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsHioControllerForm -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::IsHioControllerForm" ctype="faudes::IsHioControllerForm">

<Documentation ref="hiosys_test.html#IsHioControllerForm">
Test for dynamics compatible  the formal definition of I/O controllers.
</Documentation>
<Keywords>
HioSys        "io form"     "plant model"  generator    
</Keywords>

<VariantSignatures>
<Signature name="IsHioControllerForm(GArg,BRes)">
<Parameter name="GArg" ftype="HioController" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsHioEnvironmentForm -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::IsHioEnvironmentForm" ctype="faudes::IsHioEnvironmentForm">

<Documentation ref="hiosys_test.html#IsHioEnvironmentForm">
Test for dynamics compatible  the formal definition of the I/O environments.
</Documentation>
<Keywords>
HioSys        "io form"     "environment model"  generator    
</Keywords>

<VariantSignatures>
<Signature name="IsHioEnvironmentForm(GArg,BRes)">
<Parameter name="GArg" ftype="HioEnvironment" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsHioPlantForm -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="HioSys::IsHioPlantForm" ctype="faudes::IsHioPlantForm">

<Documentation ref="hiosys_test.html#IsHioPlantForm">
Test for dynamics compatible with the formal definition of I/O plants.
</Documentation>
<Keywords>
HioSys        "io form"     "plant model"  generator    
</Keywords>

<VariantSignatures>

<Signature name="IsHioPlantForm(GArg,ErrStr,BRes)">
<Parameter name="GArg" ftype="HioPlant" access="InOut"/>
<Parameter name="ReportStr" ftype="String" access="Out"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsHioPlantForm(GArg,BRes)">
<Parameter name="GArg" ftype="HioPlant" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsHioPlantForm(GArg,Qxx,ErrStr,BRes)">
<Parameter name="GArg" ftype="HioPlant" access="InOut"/>
<Parameter name="QYpYe" ftype="StateSet" access="Out"/>
<Parameter name="QUp" ftype="StateSet" access="Out"/>
<Parameter name="QUe" ftype="StateSet" access="Out"/>
<Parameter name="ErrEv" ftype="EventSet" access="Out"/>
<Parameter name="ErrTr" ftype="TransSet" access="Out"/>
<Parameter name="ErrSt" ftype="StateSet" access="Out"/>
<Parameter name="ReportStr" ftype="String" access="Out"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsIndicatorEventDiagnosable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsIndicatorEventDiagnosable" ctype="faudes::IsIndicatorEventDiagnosable">

<Documentation ref="diagnosis_event.html#IsIndicatorEventDiagnosable">
Tests for event-diagnosability w.r.t. failure types incl. indicator events.
</Documentation>
<Keywords>
Diagnosis     event-diagnosis  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="IsIndicatorEventDiagnosable(GArg,FMapArg,BRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="FArg" ftype="FailureTypeMap" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsInputLocallyFree -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IsInputLocallyFree" ctype="faudes::IsInputLocallyFree">

<Documentation ref="iosystem_sysdef.html#IsInputLocallyFree">
Test for the input to be locally free.
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator     non-anticipating  "free input" 
</Keywords>

<VariantSignatures>
<Signature name="IsInputLocallyFree(GArg,BRes)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsInputOmegaFree -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IsInputOmegaFree" ctype="faudes::IsInputOmegaFree">

<Documentation ref="iosystem_sysdef.html#IsInputOmegaFree">
Test for the input to be free in the behavioral sense.
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator     nonanticipating  "free input" 
</Keywords>

<VariantSignatures>
<Signature name="IsInputOmegaFree(GArg,BRes)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsIoSystem -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::IsIoSystem" ctype="faudes::IsIoSystem">

<Documentation ref="iosystem_sysdef.html#IsIoSystem">
Test for basic I/O properties.
</Documentation>
<Keywords>
IoSystem      "io form"     "io system"   generator    
</Keywords>

<VariantSignatures>
<Signature name="IsIoSystem(GArg,BRes)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsLanguageDiagnosable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsLanguageDiagnosable" ctype="faudes::IsLanguageDiagnosable">

<Documentation ref="diagnosis_language.html#IsLanguageDiagnosable">
Tests for language-diagnosability w.r.t. a specification language.
</Documentation>
<Keywords>
Diagnosis     language-diagnosis  diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="IsLanguageDiagnosable(GArg,EArg,OArgBRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="EArg" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsLocallyControlConsistent -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::IsLocallyControlConsistent" ctype="faudes::IsLCC">

<Documentation ref="observer_test.html#IsLocallyControlConsistent">
Verification of local control consistency (LCC).
</Documentation>
<Keywords>
Observer      observer      test          generator     "local control consistency" 
</Keywords>

<VariantSignatures>

<Signature name="IsLcc(GArg,Sigma_h,Res)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsLcc(GArg,Sigma_c,Sigma_h,Res)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsLoopPreservingObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsLoopPreservingObserver" ctype="faudes::IsLoopPreservingObserver">

<Documentation ref="diagnosis_language.html#IsLoopPreservingObserver">
Tests if a given projection is a loop-preserving observer.
</Documentation>
<Keywords>
Diagnosis     language-diagnosis  observer      diagnosable   loop-preserving 
</Keywords>

<VariantSignatures>
<Signature name="IsLoopPreservingObserver(GArg,AArg,OArgBRes)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="AArg" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsModularDiagnosable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::IsModularDiagnosable" ctype="faudes::IsModularDiagnosable">

<Documentation ref="diagnosis_modular.html#IsModularDiagnosable">
Tests for modular diagnosability w.r.t. local specifications for each subsystem.
</Documentation>
<Keywords>
Diagnosis     modular-diagnosis  abstraction   diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="IsModularDiagnosable(GVArg,KVArg,BRes)">
<Parameter name="GVArg" ftype="SystemVector" access="In"/>
<Parameter name="KVArg" ftype="GeneratorVector" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsMsaObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::IsMsaObserver" ctype="faudes::IsMSA">

<Documentation ref="observer_test.html#IsMsaObserver">
Verification of the msa-observer property.
</Documentation>
<Keywords>
Observer      observer      test          generator     MSA           "marked string accepting" 
</Keywords>

<VariantSignatures>
<Signature name="IsMsaObs(GArg,Sigma_h,Res)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsMtcObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::IsMtcObserver" ctype="faudes::IsMtcObs">

<Documentation ref="multitasking_observer.html#IsMtcObserver">
Verification of the observer property.
</Documentation>
<Keywords>
Multitasking  misc          observer      test          "colored generator" 
</Keywords>

<VariantSignatures>
<Signature name="IsMtcObserver(Plant,SigmaHigh,Res)">
<Parameter name="GPlant" ftype="MtcSystem" access="In"/>
<Parameter name="SigmaHi" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsMutuallyControllable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::IsMutuallyControllable" ctype="faudes::IsMutuallyControllable">

<Documentation ref="observer_test.html#IsMutuallyControllable">
Test mutual controllability of two generators
</Documentation>
<Keywords>
Observer      observer      synthesis     generator     controllabilty  mutual       
</Keywords>

<VariantSignatures>
<Signature name="IsMutuallyControllable(Sys1,Sys2)">
<Parameter name="Sys1" ftype="System" access="In"/>
<Parameter name="Sys2" ftype="System" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsNaturalObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::IsNaturalObserver" ctype="faudes::IsObs">

<Documentation ref="observer_test.html#IsNaturalObserver">
Verification of the natural observer property.
</Documentation>
<Keywords>
Observer      observer      test          generator    
</Keywords>

<VariantSignatures>
<Signature name="IsObs(GArg,Sigma_h,Res)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsNonblocking -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsNonblocking" ctype="faudes::IsNonblocking">

<Documentation ref="corefaudes_parallel.html#IsNonblocking">
Test a generator/ two languages for being nonblocking.
</Documentation>
<Keywords>
CoreFaudes    Functions     composition   generator     nonblocking  
</Keywords>

<VariantSignatures>

<Signature name="IsNonblocking(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsNonblocking(G1,G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsNonblocking(G1,G2 ... Gn)">
<Parameter name="G" ftype="GeneratorVector" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsNormal -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsNormal" ctype="faudes::IsNormal">

<Documentation ref="synthesis_normality.html#IsNormal">
Tests normality condition.
</Documentation>
<Keywords>
Synthesis     normality     observable    generator     normal        supervisor   
</Keywords>

<VariantSignatures>

<Signature name="IsNormal(L,Sigma_o,K)">
<Parameter name="L" ftype="Generator" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="K" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsNormal(G,C)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOmegaClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsOmegaClosed" ctype="faudes::IsOmegaClosed">

<Documentation ref="corefaudes_genmisc.html#IsOmegaClosed">
Tests a language for being omega-closed.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  "omega closed"  closed       
</Keywords>

<VariantSignatures>
<Signature name="IsOmegaClosed(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOmegaControllable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsOmegaControllable" ctype="faudes::IsOmegaControllable">

<Documentation ref="synthesis_omega.html#IsOmegaControllable">
Test controllablity condition.
</Documentation>
<Keywords>
Synthesis     controllability  generator     controllable  supervisor    "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="IsOmegaControllabel(G,Sigma,K)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="ACntrl" ftype="EventSet" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsOmegaControllabel(G,K)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOmegaTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsOmegaTrim" ctype="faudes::IsOmegaTrim">

<Documentation ref="corefaudes_reachability.html#IsOmegaTrim">
Tests a generator for omega trimness.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     trim          reachable    
"omega languages" 
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsOutputControlConsistent -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::IsOutputControlConsistent" ctype="faudes::IsOCC">

<Documentation ref="observer_test.html#IsOutputControlConsistent">
Verification of output control consistency (OCC).
</Documentation>
<Keywords>
Observer      observer      test          generator     "output control consistency" 
</Keywords>

<VariantSignatures>

<Signature name="IsOcc(GArg,Sigma_h,Res)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsOcc(GArg,Sigma_c,Sigma_h,Res)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsPrefixClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsPrefixClosed" ctype="faudes::IsPrefixClosed">

<Documentation ref="corefaudes_genmisc.html#IsPrefixClosed">
Tests a language for being prefix-closed.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  "prefix closed"  closed       
</Keywords>

<VariantSignatures>
<Signature name="IsPrefixClosed(G)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsRelativelyMarked -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsRelativelyMarked" ctype="faudes::IsRelativelyMarked">

<Documentation ref="synthesis_controllability.html#IsRelativelyMarked">
Test for relative marking.
</Documentation>
<Keywords>
Synthesis     controllability  "relative closed"  "relative marked"  nonblocking  
</Keywords>

<VariantSignatures>
<Signature name="IsRelativelyMarked(GPlant,GCand)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsRelativelyOmegaClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsRelativelyOmegaClosed" ctype="faudes::IsRelativelyOmegaClosed">

<Documentation ref="synthesis_omega.html#IsRelativelyOmegaClosed">
Test for relative omega-closedness.
</Documentation>
<Keywords>
Synthesis     controllability  "relative closed"  "relative marked"  nonblocking  
</Keywords>

<VariantSignatures>
<Signature name="IsRelativelyOmegaClosed(GPlant,GCand)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsRelativelyPrefixClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsRelativelyPrefixClosed" ctype="faudes::IsRelativelyPrefixClosed">

<Documentation ref="synthesis_controllability.html#IsRelativelyPrefixClosed">
Test for relative prefix-closedness.
</Documentation>
<Keywords>
Synthesis     controllability  "relatively closed"  "relatively marked"  nonblocking  
</Keywords>

<VariantSignatures>
<Signature name="IsRelativelyPrefixClosed(GPlant,GCand)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsStdSynthesisConsistent -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::IsStdSynthesisConsistent" ctype="faudes::IsStdSynthesisConsistent">

<Documentation ref="synthesis_misc.html#IsStdSynthesisConsistent">
Test consistency of an abstraction w.r.t. standard controller synthesis.
</Documentation>
<Keywords>
Synthesis     controllability  controllable  non-blocking  non-conflicting  abstractions 
</Keywords>

<VariantSignatures>

<Signature name="IsStdSynCons(GPlant,GPlant0,BRes)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GPlant0" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

<Signature name="IsStdSynCons(GPlant,ACtrl,GPlant0,BRes)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GPlant0" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsStronglyCoaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::IsStronglyCoaccessible" ctype="faudes::IsStronglyCoaccessible">

<Documentation ref="multitasking_reachability.html#IsStronglyCoaccessible">
Tests a colored generator for strong coaccessibility.
</Documentation>
<Keywords>
Multitasking  Reachability  reachability  generator     "colored marking"  coaccessible 
reachable    
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsStronglyTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::IsStronglyTrim" ctype="faudes::IsStronglyTrim">

<Documentation ref="multitasking_reachability.html#IsStronglyTrim">
Tests a colored generator for strong trimness.
</Documentation>
<Keywords>
Multitasking  Reachability  generator     "colored marking"  trim          reachable    
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function IsTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::IsTrim" ctype="faudes::IsTrim">

<Documentation ref="corefaudes_reachability.html#IsTrim">
Tests a generator for trimness.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     trim          reachable    
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function KleeneClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::KleeneClosure" ctype="faudes::KleeneClosure">

<Documentation ref="corefaudes_regular.html#KleeneClosure">
Compute Kleene closure for given language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      kleene       
closure      
</Keywords>

<VariantSignatures>

<Signature name="Lm(G) := Lm(G)*">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="Lm(GRes) := Lm(GArg)*">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageComplement -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageComplement" ctype="faudes::LanguageComplement">

<Documentation ref="corefaudes_langboolean.html#LanguageComplement">
Computes the complement of a language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      complement   
</Keywords>

<VariantSignatures>

<Signature name="Lm(GPar) := -Lm(GPar)">
<Parameter name="GPar" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="Lm(GRes) = -Lm(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="Lm(GRes) = Sigma^* - Lm(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageConcatenate -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageConcatenate" ctype="faudes::LanguageConcatenate">

<Documentation ref="corefaudes_regular.html#LanguageConcatenate">
Concatenates two languages.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      concatenate  
</Keywords>

<VariantSignatures>
<Signature name="Lm(GRes) = Lm(G1) Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageDiagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::LanguageDiagnoser" ctype="faudes::LanguageDiagnoser">

<Documentation ref="diagnosis_language.html#LanguageDiagnoser">
Computes event-diagnoser w.r.t. failure types.
</Documentation>
<Keywords>
Diagnosis     language-diagnosis  diagnoser     "comupte diagnoser" 
</Keywords>

<VariantSignatures>
<Signature name="LanguageDiagnoser(Gen,Spec,Diagnoser)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="EArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Diagnoser" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageDifference -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageDifference" ctype="faudes::LanguageDifference">

<Documentation ref="corefaudes_langboolean.html#LanguageDifference">
Computes the difference of two languages.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      difference   
</Keywords>

<VariantSignatures>
<Signature name="Lm(GRes) = Lm(G1) - Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageDisjoint -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageDisjoint" ctype="faudes::LanguageDisjoint">

<Documentation ref="corefaudes_langboolean.html#LanguageDisjoint">
Tests whether two languages are disjoint.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      disjoint     
</Keywords>

<VariantSignatures>
<Signature name="Lm(G1) ^ Lm(G2) == 0">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageEquality -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageEquality" ctype="faudes::LanguageEquality">

<Documentation ref="corefaudes_langboolean.html#LanguageEquality">
Tests whether two languages are equal.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      equal        
</Keywords>

<VariantSignatures>
<Signature name="Lm(G1) == Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageInclusion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageInclusion" ctype="faudes::LanguageInclusion">

<Documentation ref="corefaudes_langboolean.html#LanguageInclusion">
Tests whether a languages includes another language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      inclusion    
</Keywords>

<VariantSignatures>
<Signature name="Lm(G1) &lt;= Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageIntersection -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageIntersection" ctype="faudes::LanguageIntersection">

<Documentation ref="corefaudes_langboolean.html#LanguageIntersection">
Computes the intersection of languages.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  generator     language      intersection 
</Keywords>

<VariantSignatures>

<Signature name="Lm(GRes) = Lm(G1) v Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="Lm(GRes) = ^_i(G_i)">
<Parameter name="GVec" ftype="GeneratorVector" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LanguageUnion -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::LanguageUnion" ctype="faudes::LanguageUnion">

<Documentation ref="corefaudes_langboolean.html#LanguageUnion">
Computes the union of languages.
</Documentation>
<Keywords>
CoreFaudes    Functions     "regular expressions"  language      union        
</Keywords>

<VariantSignatures>

<Signature name="Lm(GRes) = Lm(G1) v Lm(G2)">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="Lm(GRes) = v_i(G_i)">
<Parameter name="GVec" ftype="GeneratorVector" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LocalObservationConsistency -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observability::LocalObservationConsistency" ctype="faudes::LocalObservationConsistency">

<Documentation>
Tests for local observation consistency.
</Documentation>
<Keywords>
Synthesis     observability  generator     abstraction   consistency  
</Keywords>

<VariantSignatures>
<Signature name="LocalObservationConsistency(G,K,Sigma,E)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="System" access="In"/>
<Parameter name="AHigh" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function LoopPreservingObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::LoopPreservingObserver" ctype="faudes::LoopPreservingObserver">

<Documentation ref="diagnosis_language.html#LoopPreservingObserver">
Compute a loop-preserving observer from a given initial alphabet.
</Documentation>
<Keywords>
Diagnosis     language-diagnosis  observer      abstraction   diagnosable   loop-preserving 
</Keywords>

<VariantSignatures>
<Signature name="LoopPreservingObserver(GArg,IArg,AArg)">
<Parameter name="GArg" ftype="System" access="In"/>
<Parameter name="IArg" ftype="EventSet" access="In"/>
<Parameter name="AArg" ftype="EventSet" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MarkAllStates -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::MarkAllStates" ctype="faudes::MarkAllStates">

<Documentation>
Mark all states in generator.
</Documentation>

<VariantSignatures>
<Signature name="Mark(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function ModularDiagnoser -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Diagnosis::ModularDiagnoser" ctype="faudes::ModularDiagnoser">

<Documentation ref="diagnosis_modular.html#ModularDiagnoser">
Compute diagnoser for subsystems with local specifications.
</Documentation>
<Keywords>
Diagnosis     modular-diagnosis  abstraction   diagnosable   diagnoser    
</Keywords>

<VariantSignatures>
<Signature name="ModularDiagnoser(GVArg,KVArg,DVArg,BRes)">
<Parameter name="GVArg" ftype="SystemVector" access="In"/>
<Parameter name="KVArg" ftype="GeneratorVector" access="In"/>
<Parameter name="DVArg" ftype="GeneratorVector" access="Out"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MsaObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::MsaObserver" ctype="faudes::calcMSAObserver">

<Documentation ref="observer_calc.html#MsaObserver">
Marked string accepting (MSA) observer computation by alphabet extension.
</Documentation>
<Keywords>
Observer      observer      synthesis     generator     msa           "marked string accepting" 
</Keywords>

<VariantSignatures>

<Signature name="MsaObs(GArg,Sigma_h)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
</Signature>

<Signature name="MsaObs(GArg,Sigma_h,#Q)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
<Parameter name="#Q" ftype="Integer" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MsaObserverLcc -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::MsaObserverLcc" ctype="faudes::calcMSAObserverLCC">

<Documentation ref="observer_calc.html#MsaObserverLcc">
Marked string accepting (MSA) observer computation with local control consistency (LCC) condition by alphabet extension.
</Documentation>
<Keywords>
Observer      observer      synthesis     generator     lcc           msa          
"local control consistency" 
</Keywords>

<VariantSignatures>

<Signature name="MsaObsLcc(Plant,Sigma_c,Sigma_h)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
</Signature>

<Signature name="MsaObsLcc(Plant,Sigma_c,Sigma_h,#Q)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
<Parameter name="#Q" ftype="Integer" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcDeterministic -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcDeterministic" ctype="faudes::mtcDeterministic">

<Documentation ref="multitasking_misc.html#MtcDeterministic">
Powerset construction to enforce determinism incl. colored markings.
</Documentation>
<Keywords>
Multitasking  Functions     "state set conversion"  deterministic  determinism  
</Keywords>

<VariantSignatures>
<Signature name="MtcDeterministic(G,GRes)">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcInvProject -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcInvProject" ctype="faudes::mtcInvProject">

<Documentation ref="multitasking_misc.html#MtcInvProject">
Inverse projection of colored languages.
</Documentation>
<Keywords>
Multitasking  Functions     "language misc"  "colored language projection" 
</Keywords>

<VariantSignatures>

<Signature name="MtcInvProject(G0,Sigma)">
<Parameter name="G0" ftype="MtcSystem" access="InOut"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
</Signature>

<Signature name="InvProject(G0,Sigma,GRes)">
<Parameter name="G0" ftype="MtcSystem" access="In"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcNaturalObserver -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcNaturalObserver" ctype="faudes::calcNaturalObserver">

<Documentation ref="multitasking_observer.html#MtcNaturalObserver">
Copmute a colored natural observer by extending a given high-level alphabet.
</Documentation>
<Keywords>
Multitasking  misc          observer      controllable  synthesis    
</Keywords>

<VariantSignatures>
<Signature name="MtcNaturalObserver(GPlant,SigmaH)">
<Parameter name="GPlant" ftype="MtcSystem" access="In"/>
<Parameter name="SigmaH" ftype="EventSet" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcParallel -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcParallel" ctype="faudes::mtcParallel">

<Documentation ref="multitasking_misc.html#MtcParallel">
Parallel composition of two colored genertors.
</Documentation>
<Keywords>
Multitasking  Functions     "colored generator"  "parallel composition"  "synchronous product" 
</Keywords>

<VariantSignatures>
<Signature name="GRes = G1 || G2">
<Parameter name="G1" ftype="MtcSystem" access="In"/>
<Parameter name="G2" ftype="MtcSystem" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcProject -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcProject" ctype="faudes::mtcProject">

<Documentation ref="multitasking_misc.html#MtcProject">
Natural projection of colored languages.
</Documentation>
<Keywords>
Multitasking  Functions     "colored language"  "colored projection" 
</Keywords>

<VariantSignatures>
<Signature name="MtcProject(G,Sigmal0,Res)">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="Sigma0" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcProjectNonDet -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcProjectNonDet" ctype="faudes::mtcProjectNonDet">

<Documentation>
Natural projection of colored languages, non deterministic version.
</Documentation>
<Keywords>
Multitasking  Functions     "colored language"  "colored projection" 
</Keywords>

<VariantSignatures>

<Signature name="MtcProjectNonDet(G,Sigmal0,Res)">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="Sigma0" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>

<Signature name="MtcProjectNonDet(G,Sigmal0)">
<Parameter name="G" ftype="MtcSystem" access="InOut"/>
<Parameter name="Sigma0" ftype="EventSet" access="In"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcStateMin -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcStateMin" ctype="faudes::mtcStateMin">

<Documentation ref="multitasking_misc.html#MtcStateMin">
State spsce minimisation w.r.t. colored languages
</Documentation>
<Keywords>
Multitasking  Functions     "state set conversion"  "minimal state set" 
</Keywords>

<VariantSignatures>
<Signature name="MtcStateMin(G,GRes)">
<Parameter name="G" ftype="MtcSystem" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcSupConClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcSupConClosed" ctype="faudes::mtcSupConClosed">

<Documentation ref="multitasking_synthesis.html#MtcSupConClosed">
Computes the supremal controllable sublanguage.
</Documentation>
<Keywords>
Multitasking  Synthesis     controllability  controllable  "controller synthesis" 
</Keywords>

<VariantSignatures>
<Signature name="MtcSupConClosed(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="MtcSystem" access="In"/>
<Parameter name="GSpec" ftype="MtcSystem" access="In"/>
<Parameter name="GSupervisor" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function MtcSupConNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::MtcSupConNB" ctype="faudes::mtcSupConNB">

<Documentation ref="multitasking_synthesis.html#MtcSupConNB">
Supremal controllable sublanguage with colored marking nonblocking condition.
</Documentation>
<Keywords>
Multitasking  Synthesis     controllability  controllable  "controller synthesis" 
</Keywords>

<VariantSignatures>
<Signature name="MtcSupConNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="MtcSystem" access="In"/>
<Parameter name="GSpec" ftype="MtcSystem" access="In"/>
<Parameter name="GSupervisor" ftype="MtcSystem" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function NaturalObserverExtension -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::NaturalObserverExtension" ctype="faudes::calcNaturalObserver">

<Documentation ref="observer_calc.html#NaturalObserverExtension">
Natural observer computation by alphabet extension.
</Documentation>
<Keywords>
Observer      observer      synthesis     generator    
</Keywords>

<VariantSignatures>

<Signature name="NatObs(GArg,Sigma_h)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
</Signature>

<Signature name="NatObs(GArg,Sigma_h,#Q)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
<Parameter name="#Q" ftype="Integer" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function NaturalObserverLcc -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::NaturalObserverLcc" ctype="faudes::calcNaturalObserverLCC">

<Documentation ref="observer_calc.html#NaturalObserverLcc">
Natural observer computation with local control consistency (LCC) condition by alphabet extension.
</Documentation>
<Keywords>
Observer      observer      synthesis     generator     lcc           "local control consistency" 
</Keywords>

<VariantSignatures>

<Signature name="NatObsLcc(Plant,Sigma_c,Sigma_h)">
<Parameter name="Plant" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
</Signature>

<Signature name="NatObsLcc(Plant,Sigma_c,Sigma_h,#Q)">
<Parameter name="Plant" ftype="Generator" access="In"/>
<Parameter name="Sigma_c" ftype="EventSet" access="In"/>
<Parameter name="Sigma_h" ftype="EventSet" access="InOut"/>
<Parameter name="#Q" ftype="Integer" access="Out" creturn="true"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function NaturalObserverRelabeling -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Observer::NaturalObserverRelabeling" ctype="faudes::calcAbstAlphObs">

<Documentation ref="observer_calc.html#NaturalObserverRelabeling">
Natural observer computation with event relabeling.
</Documentation>
<Keywords>
Observer      observer      synthesis     generator    
</Keywords>

<VariantSignatures>
<Signature name="CalcObs(Plant,SigmaHigh,SigmaHighNew,RelabelMap)">
<Parameter name="GPlant" ftype="System" access="InOut"/>
<Parameter name="SigmaHi" ftype="EventSet" access="InOut"/>
<Parameter name="SigmaHiNew" ftype="EventSet" access="Out"/>
<Parameter name="Map" ftype="EventRelabelMap" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaClosure" ctype="faudes::OmegaClosure">

<Documentation ref="corefaudes_genmisc.html#OmegaClosure">
Compute omega closure for given language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      omega        
closure      
</Keywords>

<VariantSignatures>
<Signature name="OmegaClosure(GArg)">
<Parameter name="GArg" ftype="Generator" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaConNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::OmegaConNB" ctype="faudes::OmegaConNB">

<Documentation ref="synthesis_omega.html#OmegaConNB">
Synthesis for omega-languages.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="OmegaConNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="OmegaConNB(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaConNormNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::OmegaConNormNB" ctype="faudes::OmegaConNormNB">

<Documentation ref="synthesis_omega.html#OmegaConNormNB">
Synthesis for omega-languages (experimental!).
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="OmegaConNormNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="OmegaConNormNB(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaParallel -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaParallel" ctype="faudes::aOmegaParallel">

<Documentation ref="corefaudes_parallel.html#OmegaParallel">
Parallel composition with relaxed acceptance condition.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product" 
</Keywords>

<VariantSignatures>
<Signature name="GRes = G1 || G2">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaProduct -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaProduct" ctype="faudes::aOmegaProduct">

<Documentation ref="corefaudes_parallel.html#OmegaProduct">
Product composition for Buechi acceptance condition.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product" 
</Keywords>

<VariantSignatures>
<Signature name="GRes = G1 xx G2">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaSupConNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::OmegaSupConNB" ctype="faudes::OmegaSupConNB">

<Documentation ref="synthesis_omega.html#OmegaSupConNB">
Synthesis for omega-languages.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="OmegaSupConNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="OmegaSupConNB(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaSupConNormNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::OmegaSupConNormNB" ctype="faudes::OmegaSupConNormNB">

<Documentation ref="synthesis_omega.html#OmegaSupConNB">
Synthesis for omega-languages (experimental!).
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  normality     "controller synthesis" 
"omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="OmegaSupConNormNB(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="OmegaSupConNormNB(GPlant,AContr,AObs,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OmegaTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::OmegaTrim" ctype="faudes::OmegaTrim">

<Documentation ref="corefaudes_reachability.html#OmegaTrim">
Delete states to achieve omega-trimness.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     trim          reachable    
"omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="G:=OmegaTrim(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="GRes=OmegaTrim(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function OptimalColorSet -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::OptimalColorSet" ctype="faudes::OptimalColorSet">

<Documentation ref="multitasking_optcol.html#OptimalColorSet">
Compute an optimal subset of the colors that should be removed.
</Documentation>
<Keywords>
Multitasking  misc          "redundant colors"  synthesis    
</Keywords>

<VariantSignatures>
<Signature name="OptimalColorSet(GPlant,Colors,SigmaH)">
<Parameter name="GPlant" ftype="MtcSystem" access="In"/>
<Parameter name="Colors" ftype="ColorSet" access="Out"/>
<Parameter name="SigmaH" ftype="EventSet" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Parallel -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Parallel" ctype="faudes::aParallel">

<Documentation ref="corefaudes_parallel.html#Parallel">
Computes the parallel composition of two or more generators.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "parallel composition"  "synchronous product" 
</Keywords>

<VariantSignatures>

<Signature name="GRes = G1 || G2">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="GRes = || G_i">
<Parameter name="GVec" ftype="GeneratorVector" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="Parallel with ComMap">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="CompMap" ftype="ProductCompositionMap" access="Out"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function PrefixClosure -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::PrefixClosure" ctype="faudes::PrefixClosure">

<Documentation ref="corefaudes_genmisc.html#PrefixClosure">
Compute prefix closure for given language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language      prefix       
closure      
</Keywords>

<VariantSignatures>
<Signature name="PrefixClosure(GArg)">
<Parameter name="GArg" ftype="Generator" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Product -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Product" ctype="faudes::aProduct">

<Documentation ref="corefaudes_parallel.html#Product">
Computes the product composition of two genertors.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "product composition" 
</Keywords>

<VariantSignatures>

<Signature name="GRes = G1 x G2">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="Product with ComMap">
<Parameter name="G1" ftype="Generator" access="In"/>
<Parameter name="G2" ftype="Generator" access="In"/>
<Parameter name="CompMap" ftype="ProductCompositionMap" access="Out"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Project -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Project" ctype="faudes::aProject">

<Documentation ref="corefaudes_projection.html#Project">
Natural projection of marked and generated language.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  "natural projection" 
</Keywords>

<VariantSignatures>
<Signature name="Project(G,Sigmal0,Res)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="Sigma0" ftype="EventSet" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function PushdownAccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Pushdown::PushdownAccessible" ctype="faudes::PushdownAccessible">

<Documentation ref="pushdown_index.html#PushdownAccessible">
Deletes all unaccessible transitions and unaccessible states in the input DPDA by preserving its structure. By definition, the output DPDA is accessible.
</Documentation>
<Keywords>
pushdown      context-free  accessible   
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="Input" ftype="PushdownGenerator" access="In"/>
<Parameter name="Result" ftype="PushdownGenerator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function PushdownBlockfree -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Pushdown::PushdownBlockfree" ctype="faudes::PushdownBlockfree">

<Documentation ref="pushdown_index.html#PushdownBlockfree">
Restricts the unmarked language of the input DPDA to the prefix-closure of its marked language. The automaton structure is not preserved during this operation and the stack symbols are changed. By definition, the output DPDA is nonblocking and has the same marked language as the input DPDA.
</Documentation>
<Keywords>
pushdown      context-free  nonblock     
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="Input" ftype="PushdownGenerator" access="In"/>
<Parameter name="Result" ftype="PushdownGenerator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function PushdownConstructController -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Pushdown::PushdownConstructController" ctype="faudes::PushdownConstructController">

<Documentation ref="pushdown_index.html#PushdownConstructController">
Synthesizes a minimally restrictive supervisor for its input, consisting of a plant modeled by a DFA and a specification modeled by a DPDA. The resulting supervisor is modeled by a DPDA.
</Documentation>
<Keywords>
pushdown      synthesis     context-free 
</Keywords>

<VariantSignatures>
<Signature name="Default">
<Parameter name="Spec" ftype="PushdownGenerator" access="In"/>
<Parameter name="Plant" ftype="System" access="In"/>
<Parameter name="Result" ftype="PushdownGenerator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function RemoveIoDummyStates -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="IoSystem::RemoveIoDummyStates" ctype="faudes::RemoveIoDummyStates">

<Keywords>
IoSystem     
</Keywords>

<VariantSignatures>
<Signature name="RemoveIoDummyStates(GArg)">
<Parameter name="GArg" ftype="IoSystem" access="InOut"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SelfLoop -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::SelfLoop" ctype="faudes::SelfLoop">

<Documentation ref="corefaudes_projection.html#SelfLoop">
Self loop with specified alphabet.
</Documentation>
<Keywords>
CoreFaudes    Functions     "language misc"  generator     language     
</Keywords>

<VariantSignatures>
<Signature name="SelfLoop(G,Sigma)">
<Parameter name="G" ftype="Generator" access="InOut"/>
<Parameter name="Sigma" ftype="EventSet" access="In"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function StateMin -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::StateMin" ctype="faudes::aStateMin">

<Documentation ref="corefaudes_statemin.html#StateMin">
Stateset minimization.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "state set conversion"  "state minimization" 
</Keywords>

<VariantSignatures>

<Signature name="GRes:=StateMin(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="G:=StateMin(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function StronglyCoaccessible -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::StronglyCoaccessible" ctype="faudes::StronglyCoaccessible">

<Documentation ref="multitasking_reachability.html#StronglyCoaccessible">
Delete non-stronly-coaccessible states and transitions.
</Documentation>
<Keywords>
Multitasking  Reachability  generator     "colored marking"  coaccessible  reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=StronglyCoAcc(G)">
<Parameter name="G" ftype="MtcSystem" access="InOut"/>
</Signature>

<Signature name="GRes=StronglyCoAcc(GArg)">
<Parameter name="GArg" ftype="MtcSystem" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function StronglyTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Multitasking::StronglyTrim" ctype="faudes::StronglyTrim">

<Documentation ref="multitasking_reachability.html#StronglyTrim">
Delete non-strongly-coaccessible and non-accessible states and transitions.
</Documentation>
<Keywords>
Multitasking  Reachability  generator     "colored marking"  trim          reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=StronglyTrim(G)">
<Parameter name="G" ftype="MtcSystem" access="InOut"/>
</Signature>

<Signature name="GRes=StronglyTrim(GArg)">
<Parameter name="GArg" ftype="MtcSystem" access="In"/>
<Parameter name="GRes" ftype="MtcSystem" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConClosed" ctype="faudes::SupConClosed">

<Documentation ref="synthesis_controllability.html#SupConClosed">
Computes the supremal controllable sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupC(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupC(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConCmplClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConCmplClosed" ctype="faudes::SupConCmplClosed">

<Documentation ref="synthesis_omega.html#SupConCmplClosed">
Computes the supremal controllable and complete sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="SupCC(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupCC(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConCmplNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConCmplNB" ctype="faudes::SupConCmplNB">

<Documentation ref="synthesis_omega.html#SupConCmplNB">
Computes the supremal controllable and complete sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="SupCC(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupCC(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConNB" ctype="faudes::SupConNB">

<Documentation ref="synthesis_controllability.html#SupConNB">
Computes the supremal controllable sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  "controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupC(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupC(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConNormClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConNormClosed" ctype="faudes::SupConNormClosed">

<Documentation ref="synthesis_normality.html#SupConNormClosed">
Computes the supremal controllable, normal and closed sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  normality     supremal      controllable  observable   
"controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupCN(L,E,ACtrl,AObs,GRes)">
<Parameter name="L" ftype="Generator" access="In"/>
<Parameter name="ACtrl" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="E" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupCN(GPlant,GSpec,GRes)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConNormCmplNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConNormCmplNB" ctype="faudes::SupConNormCmplNB">

<Documentation ref="synthesis_omega.html#SupConNormCmplNB">
Computes the supremal controllable normal and complete sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  normal        complete     
"controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupCNC(GPlant,GSpec,GRes)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupCNC(GPlant,AContr,AObs,GSpec,GRes)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConNormNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupConNormNB" ctype="faudes::SupConNormNB">

<Documentation ref="synthesis_normality.html#SupConNormNB">
Computes the supremal controllable and normal sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  normality     supremal      controllable  observable   
"controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupCN(L,E,ACtrl,AObs,GRes)">
<Parameter name="L" ftype="Generator" access="In"/>
<Parameter name="ACtrl" ftype="EventSet" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="E" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupCN(GPlant,GSpec,GRes)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupConditionalControllable -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::SupConditionalControllable" ctype="faudes::SupConditionalControllable">

<Documentation ref="coordinationcontrol_index.html#SupConditionalControllable">
Computation of the supremal conditionally controllable sublanguage of the specification K
</Documentation>
<Keywords>
CoordinationControl  decomposability  generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="SupConditionalControllable(SpecGen,genVect,ACntrl,supVector,Coord)">
<Parameter name="SpecGen" ftype="System" access="In"/>
<Parameter name="genVector" ftype="GeneratorVector" access="In"/>
<Parameter name="ACntrl" ftype="EventSet" access="In"/>
<Parameter name="InitEk" ftype="EventSet" access="In"/>
<Parameter name="supVector" ftype="GeneratorVector" access="Out"/>
<Parameter name="Coord" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupNorm -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupNorm" ctype="faudes::SupNorm">

<Documentation ref="synthesis_normality.html#SupNorm">
Computes the supremal normal sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  normality     observable    "controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupN(L,AObs,K,GRes)">
<Parameter name="L" ftype="Generator" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="K" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupN(GPlant,GCand,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupNormClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupNormClosed" ctype="faudes::SupNormClosed">

<Documentation ref="synthesis_normality.html#SupNormClosed">
Computes the supremal normal and closed sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  normality     observable    "controller synthesis" 
</Keywords>

<VariantSignatures>

<Signature name="SupN(L,K,AObs,GRes)">
<Parameter name="L" ftype="Generator" access="In"/>
<Parameter name="AObs" ftype="EventSet" access="In"/>
<Parameter name="K" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupN(GPlant,GCand,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GCand" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupReduce -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupReduce" ctype="faudes::SupReduce">

<Documentation ref="synthesis_misc.html#SupReduce">
Compute a reduced supervisor.
</Documentation>
<Keywords>
Synthesis     controllability  reduction    
</Keywords>

<VariantSignatures>
<Signature name="SupReduce(GPlant,GSup,GReducedSup)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSup" ftype="System" access="In"/>
<Parameter name="GReducedSup" ftype="System" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupRelativelyPrefixClosed -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupRelativelyPrefixClosed" ctype="faudes::SupRelativelyPrefixClosed">

<Documentation ref="synthesis_controllability.html#SupRelativelyPrefixClosed">
Computes the supremal relatively prefix-closed sublanguage.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  "relatively prefix closed"  "controller synthesis" 
</Keywords>

<VariantSignatures>
<Signature name="SupR(GPlant,GSpec,GRes)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function SupTconNB -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="Synthesis::SupTconNB" ctype="faudes::SupTconNB">

<Documentation ref="synthesis_misc.html#SupTconNB">
Computes the supremal controllable sublanguage w.r.t. forcible/preemptyble events.
</Documentation>
<Keywords>
Synthesis     "supremal sublanguage"  controllability  controllable  forcible      preemtable   
"controller synthesis"  "omega languages" 
</Keywords>

<VariantSignatures>

<Signature name="SupTc(GPlant,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="System" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

<Signature name="SupTc(GPlant,AContr,GSpec,GSupervisor)">
<Parameter name="GPlant" ftype="Generator" access="In"/>
<Parameter name="AContr" ftype="EventSet" access="In"/>
<Parameter name="AForcib" ftype="EventSet" access="In"/>
<Parameter name="APreemp" ftype="EventSet" access="In"/>
<Parameter name="GSpec" ftype="Generator" access="In"/>
<Parameter name="GSupervisor" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function Trim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::Trim" ctype="faudes::Trim">

<Documentation ref="corefaudes_reachability.html#Trim">
Delete non-coaccessible and non-accessible states and transitions.
</Documentation>
<Keywords>
CoreFaudes    Functions     reachability  generator     trim          reachable    
</Keywords>

<VariantSignatures>

<Signature name="G:=Trim(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="GRes=Trim(GArg)">
<Parameter name="GArg" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function UniqueInit -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoreFaudes::UniqueInit" ctype="faudes::UniqueInit">

<Documentation ref="corefaudes_statemin.html#UniqueInit">
Enforce unique initial state.
</Documentation>
<Keywords>
CoreFaudes    Functions     "generator misc"  "state set conversion"  deterministic  determinism  
"unique initialstate" 
</Keywords>

<VariantSignatures>

<Signature name="UniqueInit(G)">
<Parameter name="G" ftype="Generator" access="InOut"/>
</Signature>

<Signature name="UniqueInit(G,GRes)">
<Parameter name="G" ftype="Generator" access="In"/>
<Parameter name="GRes" ftype="Generator" access="Out"/>
</Signature>

</VariantSignatures>

</FunctionDefinition>


<!-- =================================================== -->
<!-- =================================================== -->
<!-- Faudes Function ccTrim -->
<!-- =================================================== -->
<!-- =================================================== -->

<FunctionDefinition name="CoordinationControl::ccTrim" ctype="faudes::ccTrim">

<Documentation ref="coordinationcontrol_index.html#ccTrim">
A bit more efficient trim operation based on graph algorithms.
</Documentation>
<Keywords>
CoordinationControl  trim          generator     abstraction  
</Keywords>

<VariantSignatures>
<Signature name="ccTrim(gen,trimGen)">
<Parameter name="gen" ftype="Generator" access="In"/>
<Parameter name="trimGen" ftype="Generator" access="Out"/>
<Parameter name="BRes" ftype="Boolean" access="Out" creturn="true"/>
</Signature>
</VariantSignatures>

</FunctionDefinition>


</Registry>
